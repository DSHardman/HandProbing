#include <SPI.h>
#include <Wire.h>

#define SPI_FREQ_FAST           4000000UL
#define SPI_FREQ_SLOW           500000UL
#define HSPI_MOSI_PIN           26
#define HSPI_SCK_PIN            27
#define VSPI_MOSI_PIN           11
#define VSPI_SCK_PIN            13

#define MUX_EN             1
#define MUX_DIS            0
#define NUM_ELECTRODES     32
// #define NUM_MEAS           NUM_ELECTRODES*NUM_ELECTRODES
#define NUM_MEAS           NUM_ELECTRODES*(NUM_ELECTRODES-1)*(NUM_ELECTRODES-2)*(NUM_ELECTRODES-3)/25

#define AD5930_CLK_FREQ    50000000
#define TEST_FREQ          10000
#define NUM_PERIODS        1        // Number of signal periods to measure
#define ADC_AVG            5        // Number of ADC samples to average for each analog reading

// AD5270 commands
#define CMD_WR_RDAC        0x01
#define CMD_RD_RDAC        0x02
#define CMD_ST_RDAC        0x03
#define CMD_RST            0x04
#define CMD_RD_MEM         0x05
#define CMD_RD_ADDR        0x06
#define CMD_WR_CTRL        0x07
#define CMD_RD_CTRL        0x08
#define CMD_SHTDN          0x09

// AD55930 register addresses
#define CTRL_REG           0x00
#define NUM_INCR_REG       0x01
#define DFREQ_LOW_REG      0x02
#define DFREQ_HIGH_REG     0x03
#define TIME_INCR_REG      0x04
#define TIME_BURST_REG     0x08
#define SFREQ_LOW_REG      0x0C
#define SFREQ_HIGH_REG     0x0D

#define CHIP_SEL_AD5930    3  // Chip select pin for AD5930
#define CHIP_SEL_DRIVE     0  // Chip select pin for driving digital rheostat
#define CHIP_SEL_MEAS      1 // Chip select pin for measuring digital rheostat
#define CHIP_SEL_MUX_SRC   24 // Chip select pin for source electrodes MUX - mux1
#define CHIP_SEL_MUX_SINK  28 // Chip select pin for sink electrodes MUX - mux1
#define CHIP_SEL_MUX_VP    30 // Chip select for voltage measurement positive electrodes MUX - mux1
#define CHIP_SEL_MUX_VN    32 // Chip select for voltage measurement negative electrodes MUX - mux1

// #define CHIP_SEL_MUX_SRC_2   29 // Chip select pin for source electrodes MUX - mux2
// #define CHIP_SEL_MUX_SINK_2  25 // Chip select pin for sink electrodes MUX - mux2
// #define CHIP_SEL_MUX_VP_2    33 // Chip select for voltage measurement positive electrodes MUX - mux2
// #define CHIP_SEL_MUX_VN_2    31 // Chip select for voltage measurement negative electrodes MUX - mux2

#define AD5930_MSBOUT_PIN  6
#define AD5930_INT_PIN     5  // Pulse high to reset internal state machine
#define AD5930_CTRL_PIN    4  // Pull high to start frequency sweep. Pull low to end the burst. Pull high again to increment frequency
#define AD5930_STANDBY_PIN 2  // Pull high to power down 

#define ADS_PWR            9
#define ADS_OE             10

int16_t sine_table[1024] = {
    0, 3, 6, 9, 12, 15, 18, 21, 25, 28, 31, 34, 37, 40, 43, 47,
    50, 53, 56, 59, 62, 65, 68, 72, 75, 78, 81, 84, 87, 90, 93, 96,
    99, 102, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145,
    148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193,
    195, 198, 201, 204, 207, 210, 213, 216, 218, 221, 224, 227, 230, 233, 235, 238,
    241, 244, 246, 249, 252, 255, 257, 260, 263, 265, 268, 271, 273, 276, 279, 281,
    284, 287, 289, 292, 294, 297, 299, 302, 304, 307, 310, 312, 314, 317, 319, 322,
    324, 327, 329, 332, 334, 336, 339, 341, 343, 346, 348, 350, 353, 355, 357, 359,
    362, 364, 366, 368, 370, 372, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393,
    395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 414, 416, 418, 420, 422, 423,
    425, 427, 429, 430, 432, 434, 435, 437, 439, 440, 442, 443, 445, 447, 448, 450,
    451, 453, 454, 455, 457, 458, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471,
    473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489,
    489, 490, 491, 492, 493, 494, 495, 495, 496, 497, 498, 498, 499, 500, 500, 501,
    502, 502, 503, 503, 504, 504, 505, 505, 506, 506, 507, 507, 508, 508, 508, 509,
    509, 509, 510, 510, 510, 510, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
    512, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 510, 510, 510, 510, 509,
    509, 509, 508, 508, 508, 507, 507, 506, 506, 505, 505, 504, 504, 503, 503, 502,
    502, 501, 500, 500, 499, 498, 498, 497, 496, 495, 495, 494, 493, 492, 491, 490,
    489, 489, 488, 487, 486, 485, 484, 483, 482, 481, 479, 478, 477, 476, 475, 474,
    473, 471, 470, 469, 468, 466, 465, 464, 462, 461, 460, 458, 457, 455, 454, 453,
    451, 450, 448, 447, 445, 443, 442, 440, 439, 437, 435, 434, 432, 430, 429, 427,
    425, 423, 422, 420, 418, 416, 414, 413, 411, 409, 407, 405, 403, 401, 399, 397,
    395, 393, 391, 389, 387, 385, 383, 381, 379, 377, 375, 372, 370, 368, 366, 364,
    362, 359, 357, 355, 353, 350, 348, 346, 343, 341, 339, 336, 334, 332, 329, 327,
    324, 322, 319, 317, 314, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287,
    284, 281, 279, 276, 273, 271, 268, 265, 263, 260, 257, 255, 252, 249, 246, 244,
    241, 238, 235, 233, 230, 227, 224, 221, 218, 216, 213, 210, 207, 204, 201, 198,
    195, 193, 190, 187, 184, 181, 178, 175, 172, 169, 166, 163, 160, 157, 154, 151,
    148, 145, 142, 139, 136, 133, 130, 127, 124, 121, 118, 115, 112, 109, 106, 102,
    99, 96, 93, 90, 87, 84, 81, 78, 75, 72, 68, 65, 62, 59, 56, 53,
    50, 47, 43, 40, 37, 34, 31, 28, 25, 21, 18, 15, 12, 9, 6, 3,
    0, -3, -6, -9, -12, -15, -18, -21, -25, -28, -31, -34, -37, -40, -43, -47,
    -50, -53, -56, -59, -62, -65, -68, -72, -75, -78, -81, -84, -87, -90, -93, -96,
    -99, -102, -106, -109, -112, -115, -118, -121, -124, -127, -130, -133, -136, -139, -142, -145,
    -148, -151, -154, -157, -160, -163, -166, -169, -172, -175, -178, -181, -184, -187, -190, -193,
    -195, -198, -201, -204, -207, -210, -213, -216, -218, -221, -224, -227, -230, -233, -235, -238,
    -241, -244, -246, -249, -252, -255, -257, -260, -263, -265, -268, -271, -273, -276, -279, -281,
    -284, -287, -289, -292, -294, -297, -299, -302, -304, -307, -310, -312, -314, -317, -319, -322,
    -324, -327, -329, -332, -334, -336, -339, -341, -343, -346, -348, -350, -353, -355, -357, -359,
    -362, -364, -366, -368, -370, -372, -375, -377, -379, -381, -383, -385, -387, -389, -391, -393,
    -395, -397, -399, -401, -403, -405, -407, -409, -411, -413, -414, -416, -418, -420, -422, -423,
    -425, -427, -429, -430, -432, -434, -435, -437, -439, -440, -442, -443, -445, -447, -448, -450,
    -451, -453, -454, -455, -457, -458, -460, -461, -462, -464, -465, -466, -468, -469, -470, -471,
    -473, -474, -475, -476, -477, -478, -479, -481, -482, -483, -484, -485, -486, -487, -488, -489,
    -489, -490, -491, -492, -493, -494, -495, -495, -496, -497, -498, -498, -499, -500, -500, -501,
    -502, -502, -503, -503, -504, -504, -505, -505, -506, -506, -507, -507, -508, -508, -508, -509,
    -509, -509, -510, -510, -510, -510, -511, -511, -511, -511, -511, -511, -511, -511, -511, -511,
    -512, -511, -511, -511, -511, -511, -511, -511, -511, -511, -511, -510, -510, -510, -510, -509,
    -509, -509, -508, -508, -508, -507, -507, -506, -506, -505, -505, -504, -504, -503, -503, -502,
    -502, -501, -500, -500, -499, -498, -498, -497, -496, -495, -495, -494, -493, -492, -491, -490,
    -489, -489, -488, -487, -486, -485, -484, -483, -482, -481, -479, -478, -477, -476, -475, -474,
    -473, -471, -470, -469, -468, -466, -465, -464, -462, -461, -460, -458, -457, -455, -454, -453,
    -451, -450, -448, -447, -445, -443, -442, -440, -439, -437, -435, -434, -432, -430, -429, -427,
    -425, -423, -422, -420, -418, -416, -414, -413, -411, -409, -407, -405, -403, -401, -399, -397,
    -395, -393, -391, -389, -387, -385, -383, -381, -379, -377, -375, -372, -370, -368, -366, -364,
    -362, -359, -357, -355, -353, -350, -348, -346, -343, -341, -339, -336, -334, -332, -329, -327,
    -324, -322, -319, -317, -314, -312, -310, -307, -304, -302, -299, -297, -294, -292, -289, -287,
    -284, -281, -279, -276, -273, -271, -268, -265, -263, -260, -257, -255, -252, -249, -246, -244,
    -241, -238, -235, -233, -230, -227, -224, -221, -218, -216, -213, -210, -207, -204, -201, -198,
    -195, -193, -190, -187, -184, -181, -178, -175, -172, -169, -166, -163, -160, -157, -154, -151,
    -148, -145, -142, -139, -136, -133, -130, -127, -124, -121, -118, -115, -112, -109, -106, -102,
    -99, -96, -93, -90, -87, -84, -81, -78, -75, -72, -68, -65, -62, -59, -56, -53,
    -50, -47, -43, -40, -37, -34, -31, -28, -25, -21, -18, -15, -12, -9, -6, -3
};

#define num_combos 11136
int selected_combos[num_combos] = {
8, 23, 11, 2, 8, 24, 11, 2, 9, 24, 11, 2, 9, 22, 11, 2, 9, 23, 11, 2, 8, 21, 11, 2, 8, 25, 11, 2, 8, 16, 11, 2, 28, 9, 11, 3, 8, 22, 11, 2, 8, 28, 11, 3, 9, 25, 11, 2, 27, 9, 11, 3, 8, 27, 11, 3, 9, 16, 11, 2, 30, 9, 11, 3, 26, 9, 11, 3, 9, 21, 11, 2, 8, 19, 11, 2, 29, 9, 11, 3, 9, 28, 11, 3, 8, 28, 11, 4, 8, 30, 11, 4, 8, 26, 11, 2, 8, 29, 11, 4, 8, 29, 11, 3, 9, 28, 11, 4, 20, 9, 11, 3, 17, 9, 11, 2, 9, 29, 11, 4, 9, 19, 11, 2, 9, 27, 11, 3, 30, 8, 11, 3, 9, 26, 11, 2, 8, 27, 11, 2, 8, 20, 11, 3, 18, 9, 11, 2, 9, 31, 11, 4, 9, 20, 11, 2, 8, 18, 11, 2, 8, 25, 11, 3, 9, 29, 11, 3, 25, 9, 11, 3, 22, 9, 11, 3, 8, 20, 11, 2, 9, 30, 11, 4, 9, 27, 11, 4, 18, 9, 11, 13, 8, 27, 11, 4, 28, 8, 11, 3, 9, 26, 11, 4, 8, 26, 11, 3, 17, 8, 11, 2, 29, 8, 11, 3, 19, 9, 11, 2, 9, 18, 11, 2, 9, 22, 11, 4, 9, 26, 11, 3, 23, 9, 11, 2, 7, 9, 11, 16, 8, 20, 11, 4, 9, 25, 11, 3, 8, 26, 11, 4, 8, 31, 11, 4, 19, 20, 24, 28, 30, 9, 11, 4, 8, 25, 11, 4, 8, 17, 11, 2, 17, 24, 19, 15, 27, 8, 11, 3, 8, 22, 11, 3, 25, 9, 11, 14, 27, 9, 11, 14, 8, 18, 11, 13, 26, 9, 11, 14, 24, 9, 11, 14, 17, 9, 11, 13, 9, 24, 11, 4, 29, 9, 11, 14, 9, 20, 11, 3, 8, 22, 11, 4, 23, 9, 11, 3, 20, 12, 32, 28, 8, 24, 11, 4, 8, 7, 11, 16, 18, 8, 11, 2, 9, 21, 11, 4, 28, 9, 11, 14, 25, 8, 11, 14, 8, 21, 11, 4, 10, 24, 31, 18, 9, 14, 11, 2, 22, 8, 11, 3, 29, 9, 11, 16, 26, 8, 11, 3, 9, 25, 11, 4, 9, 7, 11, 16, 9, 24, 11, 3, 9, 20, 11, 4, 29, 8, 11, 14, 28, 8, 11, 14, 8, 32, 11, 4, 17, 8, 11, 13, 9, 23, 11, 4, 24, 8, 11, 3, 9, 27, 11, 2, 23, 20, 8, 32, 8, 23, 11, 4, 7, 8, 11, 16, 24, 9, 11, 3, 27, 8, 11, 14, 20, 23, 2, 13, 20, 8, 11, 3, 15, 9, 11, 2, 6, 22, 26, 18, 9, 17, 11, 2, 25, 8, 11, 3, 21, 9, 11, 2, 20, 18, 32, 28, 31, 9, 11, 4, 8, 24, 11, 3, 24, 20, 9, 32, 22, 8, 11, 2, 21, 20, 15, 11, 8, 30, 11, 3, 21, 9, 11, 3, 23, 8, 11, 2, 24, 8, 11, 14, 23, 20, 9, 32, 27, 9, 11, 4, 24, 9, 11, 2, 17, 20, 28, 32, 26, 8, 11, 14, 26, 13, 7, 19, 19, 8, 11, 2, 21, 9, 11, 14, 20, 23, 5, 15, 9, 16, 11, 3, 5, 9, 11, 16, 6, 8, 11, 3, 20, 17, 32, 28, 9, 18, 11, 13, 22, 9, 11, 2, 19, 23, 28, 8, 24, 8, 11, 2, 8, 28, 11, 2, 26, 9, 11, 2, 16, 9, 11, 2, 30, 12, 5, 23, 20, 17, 31, 28, 32, 9, 11, 4, 9, 22, 11, 3, 20, 21, 32, 13, 28, 9, 11, 4, 23, 8, 11, 3, 27, 9, 11, 2, 32, 9, 11, 14, 25, 9, 11, 2, 8, 14, 11, 2, 7, 9, 11, 14, 9, 5, 11, 16, 15, 27, 24, 32, 19, 9, 11, 3, 6, 8, 11, 2, 26, 9, 11, 4, 9, 30, 11, 3, 6, 9, 11, 2, 21, 8, 11, 2, 2, 9, 11, 14, 21, 9, 11, 13, 20, 9, 11, 2, 21, 8, 11, 3, 19, 20, 24, 27, 20, 22, 32, 12, 20, 15, 31, 28, 23, 8, 11, 14, 9, 32, 11, 4, 29, 9, 11, 4, 24, 20, 8, 32, 22, 8, 11, 14, 25, 9, 11, 4, 17, 25, 19, 15, 8, 16, 11, 4, 8, 23, 11, 3, 9, 19, 11, 13, 30, 8, 11, 14, 23, 20, 15, 5, 18, 22, 28, 8, 4, 9, 11, 14, 15, 8, 11, 2, 17, 21, 29, 8, 9, 23, 11, 3, 26, 9, 11, 16, 30, 8, 11, 4, 23, 9, 11, 14, 19, 9, 11, 13, 13, 28, 17, 8, 23, 9, 11, 4, 20, 8, 11, 2, 21, 8, 11, 14, 20, 22, 5, 15, 21, 20, 15, 31, 19, 8, 11, 13, 31, 9, 11, 14, 31, 9, 11, 3, 22, 9, 11, 13, 32, 15, 11, 19, 30, 15, 11, 19, 20, 17, 32, 27, 20, 18, 32, 27, 24, 9, 11, 13, 21, 8, 11, 13, 22, 9, 11, 14, 20, 9, 11, 4, 1, 9, 11, 14, 7, 9, 11, 3, 8, 5, 11, 16, 25, 8, 11, 2, 15, 20, 28, 32, 17, 20, 25, 32, 30, 9, 11, 14, 17, 27, 24, 32, 4, 9, 11, 16, 32, 8, 11, 14, 31, 8, 11, 14, 17, 26, 23, 31, 8, 31, 11, 3, 5, 9, 11, 14, 9, 28, 11, 2, 3, 19, 25, 13, 9, 16, 11, 4, 20, 19, 26, 24, 8, 23, 11, 14, 8, 19, 11, 13, 3, 9, 11, 14, 28, 9, 11, 13, 18, 8, 11, 13, 22, 20, 12, 3, 18, 20, 26, 32, 6, 9, 11, 14, 24, 9, 11, 4, 9, 21, 11, 3, 31, 8, 11, 3, 17, 27, 19, 15, 10, 23, 4, 14, 19, 9, 11, 4, 8, 28, 11, 14, 8, 23, 11, 13, 19, 20, 24, 29, 8, 16, 11, 3, 5, 1, 31, 22, 13, 29, 17, 8, 27, 13, 7, 19, 32, 8, 11, 4, 30, 16, 9, 23, 29, 8, 11, 16, 28, 16, 9, 22, 5, 22, 27, 15, 15, 20, 27, 32, 25, 13, 5, 19, 20, 15, 32, 29, 1, 8, 11, 4, 30, 9, 11, 16, 9, 8, 3, 6, 27, 9, 11, 13, 21, 9, 11, 4, 26, 8, 11, 2, 8, 9, 3, 4, 27, 9, 11, 16, 18, 20, 25, 32, 25, 9, 11, 13, 17, 22, 28, 8, 21, 20, 15, 32, 22, 9, 11, 4, 13, 28, 17, 9, 20, 18, 26, 24, 31, 8, 11, 4, 17, 26, 19, 15, 17, 20, 26, 32, 24, 9, 11, 16, 18, 28, 25, 32, 1, 19, 25, 13, 28, 8, 11, 16, 8, 2, 11, 14, 8, 21, 11, 13, 7, 23, 28, 17, 17, 20, 29, 8, 20, 22, 7, 15, 2, 19, 25, 13, 10, 22, 2, 14, 12, 4, 17, 8, 22, 20, 15, 13, 2, 8, 11, 14, 23, 20, 15, 3, 22, 8, 11, 4, 11, 20, 17, 24, 29, 8, 11, 4, 20, 23, 14, 15, 9, 5, 11, 14, 8, 7, 11, 14, 2, 9, 11, 16, 9, 27, 11, 14, 7, 9, 11, 13, 20, 24, 2, 13, 5, 8, 11, 16, 9, 31, 11, 3, 20, 24, 4, 13, 9, 7, 11, 14, 28, 9, 11, 16, 7, 19, 27, 13, 20, 12, 32, 27, 8, 6, 11, 2, 8, 19, 11, 4, 22, 7, 2, 12, 28, 8, 11, 13, 15, 8, 12, 21, 19, 9, 12, 13, 7, 18, 25, 13, 8, 21, 11, 3, 32, 29, 23, 8, 1, 22, 27, 15, 28, 9, 11, 2, 7, 8, 11, 2, 6, 8, 11, 14, 20, 23, 7, 15, 29, 18, 22, 12, 9, 8, 5, 10, 7, 8, 11, 3, 20, 18, 27, 24, 18, 9, 12, 11, 20, 13, 32, 28, 3, 22, 27, 15, 23, 20, 12, 3, 19, 9, 12, 11, 6, 9, 11, 3, 24, 8, 11, 13, 3, 9, 11, 16, 20, 23, 13, 15, 9, 17, 11, 13, 20, 19, 25, 24, 30, 12, 5, 22, 22, 8, 11, 13, 9, 3, 11, 16, 8, 17, 11, 13, 31, 15, 11, 19, 25, 8, 11, 13, 4, 9, 11, 13, 13, 30, 17, 9, 29, 9, 11, 13, 16, 9, 11, 3, 29, 8, 11, 13, 2, 9, 11, 13, 20, 8, 11, 14, 13, 29, 17, 9, 17, 28, 25, 32, 23, 8, 11, 4, 8, 3, 11, 14, 20, 24, 5, 15, 1, 15, 10, 22, 1, 9, 11, 16, 3, 8, 11, 16, 18, 20, 24, 29, 23, 20, 15, 13, 8, 25, 11, 13, 23, 9, 11, 13, 20, 15, 32, 28, 10, 23, 2, 15, 9, 24, 11, 13, 4, 8, 11, 14, 20, 21, 8, 15, 31, 9, 11, 16, 7, 8, 11, 14, 8, 2, 11, 13, 4, 19, 25, 13, 19, 22, 28, 9, 26, 9, 11, 13, 18, 20, 24, 31, 25, 9, 11, 16, 28, 9, 12, 11, 27, 8, 11, 13, 20, 18, 5, 27, 18, 9, 11, 4, 6, 9, 11, 13, 24, 8, 11, 4, 20, 21, 2, 13, 26, 13, 5, 19, 9, 25, 11, 13, 20, 18, 31, 28, 27, 8, 11, 16, 13, 31, 17, 9, 20, 23, 32, 12, 26, 8, 11, 13, 20, 8, 11, 4, 20, 21, 10, 13, 8, 7, 11, 13, 8, 6, 11, 14, 1, 9, 11, 13, 8, 26, 11, 14, 8, 5, 11, 14, 17, 28, 19, 15, 8, 4, 11, 14, 30, 23, 17, 8, 23, 20, 15, 2, 2, 23, 27, 18, 28, 15, 11, 19, 30, 13, 5, 23, 20, 17, 27, 24, 19, 20, 24, 32, 13, 31, 17, 8, 28, 24, 17, 8, 10, 23, 31, 17, 10, 24, 32, 18, 20, 18, 25, 24, 16, 8, 11, 2, 20, 12, 31, 28, 17, 16, 32, 28, 1, 15, 10, 23, 20, 21, 4, 13, 20, 15, 31, 27, 25, 8, 11, 4, 9, 19, 11, 4, 17, 25, 22, 31, 7, 19, 26, 13, 8, 5, 11, 13, 3, 8, 11, 14, 32, 9, 11, 16, 29, 12, 5, 23, 24, 20, 15, 3, 20, 17, 31, 27, 25, 13, 7, 18, 20, 9, 11, 13, 9, 32, 11, 14, 6, 28, 19, 12, 8, 15, 11, 2, 20, 17, 26, 24, 20, 22, 13, 15, 9, 24, 11, 14, 8, 27, 11, 14, 20, 21, 9, 15, 23, 9, 12, 11, 28, 8, 11, 4, 15, 20, 29, 32, 13, 30, 17, 8, 29, 15, 11, 19, 27, 9, 12, 11, 9, 25, 11, 14, 18, 23, 29, 8, 9, 4, 11, 13, 28, 9, 12, 13, 19, 9, 11, 14, 2, 22, 26, 17, 16, 17, 10, 11, 5, 19, 25, 13, 26, 8, 11, 4, 3, 9, 11, 13, 8, 6, 11, 16, 26, 22, 17, 8, 2, 8, 11, 16, 20, 24, 2, 12, 32, 9, 11, 13, 8, 24, 11, 14, 20, 21, 31, 12, 22, 8, 12, 11, 26, 8, 11, 16, 18, 9, 11, 3, 8, 4, 11, 16, 31, 8, 11, 16, 25, 13, 3, 19, 10, 22, 2, 15, 27, 8, 11, 2, 23, 8, 12, 11, 7, 10, 15, 22, 9, 26, 11, 13, 1, 8, 11, 14, 9, 19, 11, 3, 18, 9, 12, 13, 21, 7, 13, 28, 12, 2, 17, 8, 10, 24, 2, 15, 20, 23, 10, 13, 8, 28, 11, 13, 21, 8, 11, 4, 8, 4, 11, 13, 10, 22, 4, 14, 5, 8, 11, 14, 23, 8, 11, 13, 20, 21, 7, 15, 18, 23, 28, 8, 10, 24, 4, 14, 5, 9, 11, 13, 28, 1, 7, 11, 2, 22, 27, 15, 20, 23, 4, 13, 9, 23, 11, 13, 7, 9, 11, 2, 7, 24, 28, 19, 8, 24, 11, 13, 20, 22, 31, 12, 30, 8, 11, 13, 8, 31, 11, 14, 31, 13, 7, 24, 23, 20, 12, 2, 4, 22, 27, 15, 32, 22, 25, 18, 18, 24, 29, 8, 17, 22, 29, 8, 9, 26, 11, 14, 15, 20, 26, 32, 20, 24, 14, 15, 8, 7, 11, 2, 20, 21, 32, 12, 9, 5, 11, 13, 20, 23, 3, 13, 22, 4, 18, 26, 9, 32, 11, 13, 21, 10, 15, 29, 24, 9, 12, 11, 15, 9, 12, 21, 23, 20, 15, 4, 4, 8, 11, 16, 27, 9, 12, 13, 18, 20, 28, 32, 5, 21, 26, 15, 19, 8, 11, 3, 30, 9, 11, 13, 13, 32, 17, 8, 9, 21, 11, 13, 1, 9, 11, 4, 26, 9, 12, 13, 18, 21, 28, 9, 21, 24, 28, 8, 22, 20, 15, 2, 8, 19, 11, 3, 6, 9, 11, 16, 19, 8, 11, 4, 9, 1, 11, 13, 25, 13, 4, 19, 31, 9, 11, 13, 17, 21, 28, 8, 21, 20, 15, 13, 30, 11, 5, 22, 9, 11, 12, 13, 9, 4, 11, 14, 15, 20, 28, 3, 19, 8, 11, 14, 12, 20, 25, 32, 8, 3, 11, 13, 1, 19, 26, 13, 8, 1, 11, 14, 9, 4, 11, 16, 1, 15, 10, 24, 32, 8, 11, 13, 7, 8, 11, 13, 9, 3, 11, 14, 8, 25, 11, 14, 20, 19, 27, 24, 18, 20, 24, 28, 5, 18, 25, 12, 6, 23, 32, 13, 25, 8, 11, 16, 4, 19, 26, 13, 31, 8, 11, 13, 12, 3, 17, 8, 8, 9, 3, 6, 24, 10, 17, 32, 20, 9, 11, 14, 30, 17, 10, 23, 31, 15, 10, 21, 8, 6, 11, 13, 21, 9, 12, 11, 18, 16, 32, 28, 2, 15, 10, 22, 27, 8, 11, 4, 20, 15, 5, 27, 8, 18, 11, 3, 24, 10, 18, 32, 7, 21, 4, 10, 22, 4, 17, 26, 8, 26, 11, 13, 20, 18, 32, 26, 11, 9, 12, 13, 9, 29, 11, 13, 15, 16, 29, 8, 8, 15, 12, 30, 10, 12, 25, 23, 22, 20, 8, 5, 21, 20, 15, 3, 5, 19, 26, 13, 9, 27, 11, 13, 8, 17, 11, 3, 19, 6, 13, 26, 7, 22, 28, 15, 15, 16, 22, 2, 1, 21, 26, 15, 2, 15, 10, 23, 8, 11, 12, 13, 8, 2, 11, 16, 10, 9, 12, 17, 1, 22, 26, 18, 28, 23, 17, 8, 20, 21, 11, 15, 15, 20, 25, 32, 9, 2, 11, 14, 29, 12, 5, 22, 6, 23, 14, 12, 20, 17, 25, 24, 8, 9, 5, 10, 7, 19, 28, 13, 8, 27, 11, 16, 2, 8, 11, 13, 12, 4, 17, 9, 7, 24, 4, 10, 10, 23, 2, 14, 19, 3, 13, 26, 20, 23, 2, 12, 32, 15, 10, 22, 21, 23, 28, 9, 15, 16, 28, 8, 20, 28, 10, 11, 17, 23, 29, 8, 22, 20, 15, 3, 7, 9, 12, 13, 27, 23, 17, 8, 9, 2, 11, 13, 22, 9, 12, 11, 24, 9, 12, 13, 28, 14, 10, 19, 26, 11, 5, 18, 9, 7, 11, 13, 3, 1, 31, 22, 6, 13, 10, 18, 32, 8, 11, 3, 1, 15, 28, 8, 10, 9, 11, 13, 18, 21, 29, 9, 8, 18, 11, 4, 10, 8, 12, 17, 20, 23, 3, 15, 14, 8, 11, 22, 10, 17, 32, 28, 19, 21, 28, 9, 8, 13, 11, 16, 27, 18, 32, 24, 20, 23, 4, 14, 8, 31, 11, 16, 21, 6, 15, 26, 17, 31, 19, 15, 15, 28, 25, 32, 15, 16, 29, 9, 17, 20, 29, 32, 17, 16, 9, 5, 8, 23, 11, 12, 20, 17, 5, 27, 9, 29, 11, 14, 20, 18, 32, 25, 31, 16, 9, 24, 27, 17, 32, 24, 6, 24, 14, 12, 22, 20, 15, 5, 18, 5, 12, 24, 27, 22, 17, 8, 32, 8, 11, 16, 5, 9, 12, 13, 25, 9, 12, 13, 21, 8, 12, 11, 8, 32, 11, 13, 9, 31, 11, 13, 17, 20, 29, 9, 23, 10, 15, 32, 8, 29, 11, 14, 7, 22, 4, 10, 4, 23, 28, 17, 9, 7, 11, 2, 18, 8, 11, 3, 20, 24, 32, 12, 30, 8, 11, 16, 8, 31, 11, 13, 10, 24, 32, 17, 22, 24, 28, 9, 20, 21, 5, 15, 29, 23, 17, 8, 24, 20, 15, 4, 20, 23, 31, 12, 8, 32, 11, 14, 8, 9, 2, 11, 7, 9, 11, 4, 2, 13, 17, 9, 23, 10, 14, 2, 24, 20, 8, 31, 32, 29, 23, 9, 20, 17, 32, 26, 28, 16, 8, 22, 9, 15, 11, 2, 8, 32, 11, 3, 13, 27, 17, 9, 32, 9, 11, 3, 13, 27, 17, 8, 8, 7, 11, 20, 16, 9, 11, 4, 20, 18, 5, 28, 20, 22, 10, 11, 9, 18, 11, 4, 24, 8, 11, 16, 8, 3, 11, 16, 26, 12, 5, 19, 19, 7, 13, 27, 8, 28, 11, 16, 20, 24, 4, 14, 20, 24, 10, 13, 27, 24, 17, 8, 18, 20, 25, 5, 9, 23, 11, 14, 10, 12, 26, 23, 30, 16, 8, 23, 19, 24, 29, 8, 20, 24, 4, 15, 17, 30, 19, 15, 8, 26, 11, 16, 17, 3, 19, 15, 17, 20, 27, 32, 21, 20, 15, 4, 18, 23, 12, 5, 20, 23, 2, 14, 22, 10, 15, 32, 19, 5, 12, 27, 8, 30, 11, 13, 3, 19, 26, 13, 31, 20, 24, 13, 8, 27, 11, 13, 9, 8, 3, 4, 20, 13, 32, 27, 6, 8, 11, 16, 18, 27, 24, 32, 29, 17, 21, 12, 22, 3, 17, 27, 24, 20, 15, 2, 13, 32, 17, 9, 16, 8, 11, 3, 4, 21, 26, 15, 17, 16, 32, 27, 9, 28, 11, 14, 17, 1, 19, 15, 25, 8, 12, 11, 17, 20, 28, 2, 5, 19, 26, 12, 17, 20, 28, 3, 19, 28, 15, 22, 18, 21, 28, 8, 8, 15, 12, 2, 8, 29, 11, 2, 20, 21, 27, 15, 20, 21, 29, 15, 5, 22, 26, 17, 20, 14, 32, 27, 12, 28, 25, 32, 9, 13, 11, 16, 7, 23, 29, 15, 4, 22, 26, 17, 7, 18, 26, 13, 29, 24, 17, 8, 18, 22, 29, 8, 24, 8, 12, 11, 21, 10, 14, 2, 12, 20, 26, 32, 9, 31, 11, 16, 28, 9, 5, 13, 2, 19, 25, 12, 15, 27, 22, 3, 10, 24, 31, 17, 27, 17, 7, 23, 15, 8, 12, 30, 31, 13, 7, 23, 17, 4, 19, 15, 9, 22, 11, 13, 20, 19, 32, 28, 23, 7, 13, 32, 21, 9, 11, 16, 32, 30, 23, 8, 5, 23, 27, 18, 29, 25, 17, 8, 29, 15, 7, 23, 32, 24, 17, 8, 17, 29, 19, 15, 29, 16, 8, 23, 22, 20, 12, 2, 19, 22, 28, 8, 2, 15, 10, 24, 16, 9, 11, 30, 18, 22, 29, 9, 21, 10, 15, 31, 8, 25, 11, 16, 3, 18, 24, 13, 28, 18, 7, 24, 31, 28, 23, 8, 21, 20, 15, 14, 25, 13, 2, 19, 5, 24, 28, 19, 23, 20, 15, 11, 27, 14, 8, 19, 16, 15, 4, 21, 9, 6, 11, 16, 28, 22, 17, 8, 25, 12, 5, 19, 9, 6, 11, 13, 20, 18, 5, 25, 1, 15, 10, 21, 9, 28, 11, 13, 16, 17, 3, 11, 9, 29, 11, 2, 21, 20, 15, 7, 23, 10, 17, 32, 10, 21, 2, 14, 22, 24, 28, 8, 30, 28, 23, 8, 18, 8, 12, 13, 23, 5, 19, 27, 23, 8, 12, 13, 16, 17, 4, 11, 22, 10, 14, 2, 19, 23, 29, 9, 20, 17, 5, 28, 6, 12, 25, 23, 12, 2, 17, 9, 15, 32, 19, 11, 16, 15, 3, 21, 6, 27, 19, 12, 3, 22, 26, 17, 26, 9, 12, 11, 8, 9, 19, 21, 10, 9, 11, 19, 24, 10, 17, 31, 20, 22, 2, 13, 21, 20, 8, 32, 9, 2, 11, 16, 25, 12, 5, 18, 1, 18, 24, 13, 28, 8, 11, 2, 20, 8, 11, 13, 28, 17, 8, 23, 3, 23, 27, 18, 30, 12, 4, 22, 24, 14, 21, 27, 9, 26, 11, 16, 20, 18, 3, 26, 10, 22, 29, 17, 27, 9, 5, 13, 15, 9, 12, 26, 23, 9, 12, 13, 1, 8, 11, 16, 15, 9, 12, 30, 10, 12, 25, 24, 19, 27, 15, 22, 4, 19, 26, 12, 4, 8, 11, 13, 9, 1, 11, 14, 22, 2, 15, 27, 20, 21, 2, 15, 17, 16, 32, 24, 18, 16, 32, 27, 21, 20, 12, 3, 20, 14, 32, 28, 19, 20, 24, 31, 9, 8, 2, 11, 15, 8, 12, 31, 15, 8, 12, 26, 9, 14, 11, 20, 9, 18, 11, 3, 24, 20, 15, 13, 27, 20, 23, 12, 26, 23, 17, 8, 17, 6, 9, 4, 17, 20, 24, 31, 21, 8, 12, 13, 4, 22, 26, 18, 6, 7, 32, 28, 18, 2, 12, 24, 15, 21, 28, 8, 28, 7, 24, 32, 8, 24, 11, 12, 18, 23, 28, 9, 20, 21, 31, 15, 6, 13, 10, 17, 19, 23, 29, 8, 1, 17, 21, 13, 8, 29, 11, 13, 20, 15, 5, 28, 3, 9, 11, 5, 19, 8, 12, 11, 14, 9, 11, 22, 20, 19, 2, 13, 8, 1, 11, 4, 24, 9, 11, 15, 20, 21, 2, 12, 1, 20, 26, 12, 20, 24, 7, 15, 22, 25, 32, 12, 7, 8, 12, 11, 28, 15, 9, 21, 2, 18, 24, 13, 18, 4, 12, 24, 9, 15, 12, 30, 1, 22, 28, 15, 7, 8, 12, 13, 17, 20, 28, 5, 21, 23, 28, 8, 18, 2, 12, 23, 1, 19, 25, 12, 17, 9, 11, 4, 19, 8, 12, 13, 5, 18, 24, 13, 29, 9, 11, 15, 20, 24, 13, 15, 6, 19, 26, 13, 9, 22, 11, 14, 15, 20, 27, 4, 20, 17, 3, 29, 28, 3, 10, 13, 7, 23, 4, 10, 9, 3, 11, 13, 1, 7, 19, 31, 28, 6, 15, 22, 6, 21, 14, 12, 24, 20, 15, 5, 1, 5, 25, 31, 20, 21, 29, 12, 9, 31, 11, 14, 3, 8, 11, 13, 21, 24, 28, 9, 30, 15, 10, 21, 20, 19, 5, 24, 8, 17, 11, 12, 20, 18, 3, 27, 20, 21, 31, 13, 23, 9, 11, 16, 32, 15, 9, 23, 18, 26, 23, 31, 29, 13, 5, 23, 9, 24, 11, 12, 7, 24, 29, 17, 2, 19, 26, 13, 9, 17, 11, 3, 14, 9, 11, 20, 15, 20, 28, 4, 17, 16, 11, 5, 8, 15, 12, 3, 30, 13, 3, 23, 18, 24, 29, 9, 22, 1, 17, 26, 5, 8, 12, 13, 9, 17, 11, 12, 23, 3, 18, 27, 3, 21, 26, 15, 19, 8, 32, 15, 24, 20, 12, 3, 20, 19, 4, 13, 15, 8, 12, 27, 8, 14, 11, 20, 9, 27, 11, 16, 9, 17, 11, 4, 22, 10, 5, 15, 12, 23, 15, 8, 31, 29, 23, 8, 5, 19, 27, 12, 10, 8, 11, 21, 19, 5, 13, 26, 18, 8, 13, 14, 15, 22, 29, 8, 19, 5, 12, 26, 8, 7, 11, 3, 15, 16, 23, 3, 21, 20, 15, 5, 20, 19, 28, 24, 1, 8, 11, 13, 4, 19, 25, 12, 20, 17, 32, 25, 17, 16, 12, 32, 30, 18, 22, 12, 17, 16, 8, 5, 20, 17, 31, 26, 23, 20, 15, 14, 9, 15, 12, 2, 9, 8, 19, 21, 31, 18, 23, 8, 12, 22, 15, 9, 9, 23, 11, 12, 19, 20, 24, 4, 13, 20, 26, 32, 1, 17, 19, 15, 17, 6, 19, 15, 20, 28, 13, 15, 20, 17, 32, 29, 1, 14, 10, 19, 31, 15, 10, 22, 24, 20, 12, 2, 31, 28, 23, 9, 9, 30, 11, 13, 15, 16, 22, 3, 17, 3, 10, 26, 19, 5, 11, 27, 1, 22, 26, 17, 8, 22, 11, 13, 31, 15, 20, 21, 18, 3, 12, 24, 20, 21, 4, 15, 30, 11, 4, 22, 6, 7, 25, 18, 6, 13, 25, 23, 12, 22, 15, 8, 9, 7, 11, 3, 31, 16, 8, 24, 15, 20, 28, 2, 20, 28, 14, 15, 7, 9, 12, 11, 20, 21, 10, 15, 8, 28, 11, 12, 20, 24, 2, 15, 20, 24, 10, 15, 20, 19, 2, 24, 25, 9, 12, 11, 19, 23, 28, 9, 20, 18, 31, 26, 23, 20, 12, 32, 3, 9, 12, 5, 20, 22, 10, 15, 6, 11, 25, 18, 6, 18, 25, 13, 18, 20, 25, 31, 18, 20, 28, 2, 2, 21, 26, 15, 20, 19, 4, 24, 3, 17, 19, 15, 9, 6, 11, 14, 11, 8, 12, 13, 23, 25, 32, 13, 29, 15, 10, 21, 12, 3, 17, 9, 26, 13, 2, 19, 30, 24, 17, 9, 17, 20, 27, 4, 9, 19, 11, 12, 27, 13, 31, 24, 19, 6, 12, 26, 8, 15, 28, 12, 15, 9, 12, 25, 20, 24, 10, 14, 27, 18, 7, 23, 17, 20, 25, 5, 4, 24, 29, 18, 24, 32, 17, 8, 29, 28, 23, 8, 10, 9, 11, 18, 19, 4, 12, 26, 20, 23, 28, 8, 29, 14, 10, 19, 8, 25, 11, 12, 5, 17, 20, 21, 10, 21, 25, 17, 10, 8, 12, 27, 7, 8, 11, 4, 15, 26, 23, 31, 32, 24, 17, 9, 20, 19, 29, 13, 12, 5, 18, 9, 17, 20, 27, 3, 29, 1, 10, 32, 30, 9, 11, 2, 20, 7, 14, 15, 27, 24, 17, 9, 21, 24, 29, 9, 8, 30, 11, 2, 9, 29, 11, 16, 23, 32, 15, 8, 31, 9, 12, 13, 20, 12, 31, 27, 22, 5, 17, 27, 17, 32, 23, 8, 32, 28, 22, 12, 16, 15, 2, 21, 22, 9, 12, 13, 16, 17, 7, 11, 6, 29, 19, 12, 7, 22, 31, 13, 9, 18, 13, 4, 14, 9, 11, 30, 32, 23, 15, 8, 29, 8, 11, 15, 5, 25, 28, 22, 19, 20, 12, 5, 20, 23, 10, 14, 20, 18, 10, 13, 20, 23, 2, 15, 21, 20, 15, 28, 18, 22, 28, 9, 6, 28, 14, 12, 6, 19, 25, 13, 15, 20, 28, 8, 29, 9, 11, 2, 29, 20, 24, 4, 28, 25, 19, 8, 20, 23, 4, 15, 20, 15, 32, 27, 21, 9, 12, 13, 15, 20, 25, 31, 17, 16, 11, 3, 15, 8, 12, 32, 30, 17, 10, 22, 6, 8, 11, 13, 19, 20, 13, 5, 6, 12, 20, 18, 18, 5, 12, 25, 23, 20, 16, 2, 20, 21, 4, 12, 4, 19, 27, 13, 28, 8, 11, 15, 15, 20, 27, 3, 3, 9, 12, 13, 22, 1, 18, 26, 15, 26, 5, 8, 20, 18, 3, 25, 8, 29, 11, 16, 20, 21, 32, 15, 20, 27, 32, 24, 3, 15, 20, 22, 8, 18, 11, 12, 8, 30, 11, 14, 8, 1, 11, 13, 20, 19, 31, 24, 23, 7, 18, 27, 18, 25, 31, 9, 7, 18, 27, 13, 18, 8, 12, 11, 22, 10, 17, 32, 20, 22, 32, 15, 31, 17, 21, 12, 31, 29, 23, 9, 16, 17, 25, 24, 8, 20, 11, 13, 29, 9, 5, 13, 17, 23, 28, 9, 9, 10, 11, 19, 27, 20, 24, 32, 20, 18, 10, 12, 9, 1, 11, 16, 29, 15, 9, 21, 32, 23, 17, 27, 19, 20, 24, 7, 2, 13, 17, 8, 16, 15, 4, 22, 20, 15, 4, 29, 17, 8, 11, 4, 10, 18, 6, 13, 20, 15, 4, 27, 6, 18, 24, 13, 13, 20, 25, 32, 7, 15, 20, 21, 10, 12, 29, 23, 29, 18, 8, 24, 8, 10, 11, 19, 19, 20, 7, 32, 5, 8, 11, 13, 30, 24, 17, 8, 28, 13, 5, 21, 20, 18, 4, 26, 18, 20, 29, 9, 23, 5, 18, 28, 20, 15, 31, 26, 9, 28, 11, 16, 8, 19, 11, 12, 18, 8, 11, 4, 17, 1, 12, 21, 22, 3, 18, 26, 15, 18, 23, 8, 32, 12, 20, 18, 1, 5, 13, 31, 7, 20, 28, 13, 22, 5, 19, 25, 9, 27, 11, 15, 26, 1, 8, 11, 23, 15, 8, 19, 20, 25, 10, 14, 28, 19, 12, 8, 28, 17, 7, 23, 1, 14, 10, 21, 20, 22, 2, 12, 20, 23, 10, 12, 32, 15, 20, 21, 28, 22, 17, 9, 18, 16, 32, 26, 26, 13, 4, 19, 30, 28, 23, 9, 1, 20, 27, 12, 10, 17, 20, 21, 29, 27, 23, 8, 21, 1, 13, 28, 17, 19, 23, 8, 29, 17, 8, 24, 29, 17, 9, 24, 20, 21, 5, 12, 21, 9, 11, 15, 20, 28, 10, 12, 20, 19, 2, 12, 21, 20, 12, 32, 17, 32, 19, 15, 17, 6, 1, 22, 6, 8, 11, 4, 18, 20, 24, 27, 20, 18, 31, 27, 17, 24, 31, 8, 17, 20, 25, 31, 8, 30, 11, 16, 13, 26, 17, 8, 22, 30, 31, 29, 14, 15, 32, 22, 29, 22, 15, 8, 22, 10, 15, 31, 28, 6, 9, 4, 24, 21, 17, 8, 22, 9, 11, 16, 9, 30, 11, 14, 19, 24, 28, 9, 29, 16, 8, 22, 19, 29, 15, 22, 31, 9, 12, 11, 15, 20, 26, 4, 20, 17, 3, 27, 2, 18, 24, 12, 17, 16, 11, 2, 19, 8, 12, 14, 17, 20, 29, 3, 19, 20, 24, 5, 27, 18, 8, 23, 26, 14, 8, 19, 20, 19, 32, 24, 18, 6, 13, 26, 18, 20, 27, 32, 12, 21, 15, 8, 5, 18, 27, 11, 7, 19, 4, 10, 9, 15, 12, 3, 24, 8, 12, 13, 18, 9, 13, 14, 20, 22, 3, 15, 6, 24, 31, 15, 21, 23, 29, 9, 6, 12, 20, 17, 19, 20, 12, 32, 10, 25, 32, 18, 13, 26, 17, 9, 21, 20, 12, 2, 20, 15, 4, 26, 12, 26, 18, 5, 17, 26, 22, 3, 18, 9, 13, 32, 20, 15, 27, 24, 20, 27, 13, 15, 20, 18, 4, 29, 30, 15, 7, 23, 24, 32, 17, 9, 21, 31, 15, 8, 22, 20, 15, 32, 12, 27, 19, 5, 1, 15, 10, 25, 21, 20, 15, 2, 30, 17, 5, 8, 24, 30, 17, 8, 20, 21, 4, 11, 20, 18, 5, 26, 7, 17, 1, 11, 16, 15, 4, 23, 15, 8, 11, 22, 28, 20, 23, 15, 29, 3, 10, 13, 9, 7, 11, 20, 18, 20, 9, 32, 29, 1, 18, 32, 19, 3, 12, 26, 12, 25, 15, 8, 26, 17, 4, 22, 6, 22, 29, 15, 20, 18, 2, 27, 15, 16, 21, 3, 29, 24, 17, 9, 24, 7, 19, 28, 3, 18, 26, 11, 20, 21, 10, 14, 5, 1, 31, 21, 28, 20, 15, 14, 32, 17, 21, 12, 13, 26, 19, 5, 28, 4, 12, 22, 23, 6, 10, 11, 13, 3, 17, 9, 20, 24, 4, 12, 24, 32, 15, 8, 32, 30, 23, 9, 17, 20, 28, 9, 14, 31, 19, 8, 20, 27, 13, 23, 22, 8, 12, 13, 22, 32, 15, 8, 9, 7, 11, 15, 14, 31, 19, 9, 7, 25, 4, 10, 28, 17, 9, 23, 26, 17, 20, 13, 6, 17, 19, 15, 20, 12, 32, 26, 23, 31, 17, 8, 7, 1, 31, 22, 6, 21, 27, 15, 31, 25, 17, 9, 16, 22, 28, 8, 9, 5, 11, 12, 19, 2, 12, 26, 20, 7, 13, 28, 17, 23, 28, 8, 26, 17, 2, 22, 9, 30, 12, 11, 20, 22, 4, 11, 22, 5, 18, 26, 20, 23, 2, 11, 17, 20, 26, 3, 25, 17, 20, 13, 29, 18, 5, 24, 31, 25, 17, 8, 20, 21, 3, 13, 20, 23, 32, 13, 20, 22, 3, 11, 20, 15, 4, 28, 20, 22, 14, 15, 11, 16, 32, 24, 18, 20, 26, 3, 24, 5, 10, 11, 10, 21, 27, 15, 8, 22, 11, 14, 17, 21, 32, 8, 10, 9, 11, 22, 28, 18, 12, 8, 20, 25, 10, 13, 20, 18, 3, 12, 32, 19, 13, 8, 15, 27, 19, 8, 27, 11, 5, 19, 3, 1, 31, 19, 20, 21, 26, 15, 13, 25, 18, 5, 18, 1, 12, 22, 18, 1, 12, 23, 20, 19, 7, 13, 20, 17, 3, 28, 6, 24, 4, 9, 29, 6, 17, 22, 24, 14, 8, 18, 28, 6, 11, 15, 6, 12, 26, 23, 18, 1, 12, 24, 18, 24, 12, 5, 15, 20, 25, 4, 2, 17, 21, 13, 20, 24, 28, 8, 16, 18, 28, 32, 2, 15, 29, 8, 14, 32, 19, 9, 21, 20, 9, 32, 16, 17, 22, 32, 19, 20, 25, 5, 6, 27, 14, 12, 28, 1, 14, 21, 18, 20, 28, 4, 25, 31, 17, 8, 20, 21, 4, 14, 23, 5, 18, 27, 3, 22, 26, 18, 16, 24, 27, 21, 13, 2, 8, 18, 6, 21, 26, 15, 23, 3, 15, 28, 18, 25, 31, 8, 12, 20, 29, 4, 10, 23, 17, 3, 28, 19, 12, 9, 9, 25, 11, 12, 26, 9, 11, 15, 10, 12, 23, 5, 19, 7, 13, 26, 26, 32, 17, 9, 2, 22, 27, 12, 13, 18, 19, 17, 4, 18, 24, 13, 12, 5, 17, 9, 20, 17, 30, 24, 22, 6, 10, 11, 20, 23, 3, 12, 12, 10, 18, 25, 25, 22, 17, 8, 9, 10, 12, 26, 21, 20, 12, 4, 20, 18, 4, 27, 20, 19, 10, 24, 29, 14, 5, 24, 14, 9, 11, 2, 20, 17, 10, 26, 23, 32, 15, 9, 29, 19, 22, 15, 9, 28, 11, 12, 16, 17, 26, 24, 20, 29, 31, 30, 28, 20, 8, 2, 6, 26, 19, 12, 29, 15, 31, 30, 20, 19, 4, 11, 8, 3, 11, 12, 18, 9, 13, 4, 5, 22, 28, 15, 32, 15, 10, 21, 14, 32, 19, 8, 27, 14, 31, 24, 2, 20, 26, 12, 21, 32, 15, 8, 20, 5, 10, 11, 24, 7, 13, 32, 1, 5, 26, 31, 17, 3, 10, 25, 5, 18, 25, 13, 1, 28, 10, 7, 8, 7, 11, 15, 8, 21, 11, 14, 22, 20, 15, 31, 17, 20, 26, 4, 32, 28, 23, 8, 10, 15, 32, 29, 9, 29, 11, 12, 12, 25, 19, 5, 18, 20, 24, 32, 2, 14, 10, 19, 4, 22, 28, 15, 20, 17, 10, 27, 16, 8, 11, 30, 30, 15, 20, 21, 19, 7, 12, 28, 25, 32, 17, 8, 19, 4, 13, 26, 32, 25, 17, 8, 4, 18, 24, 12, 14, 20, 25, 32, 18, 6, 10, 13, 28, 1, 8, 11, 30, 9, 5, 13, 24, 15, 8, 19, 15, 16, 28, 9, 22, 29, 17, 8, 24, 12, 4, 18, 20, 22, 10, 12, 24, 15, 9, 19, 8, 17, 13, 2, 12, 1, 15, 8, 27, 8, 5, 13, 1, 29, 22, 12, 22, 2, 17, 27, 22, 20, 8, 32, 20, 17, 3, 26, 18, 24, 28, 8, 20, 24, 4, 11, 17, 20, 28, 4, 15, 16, 24, 32, 2, 32, 25, 18, 17, 16, 12, 31, 17, 8, 13, 25, 32, 19, 13, 25, 12, 24, 15, 8, 21, 25, 29, 8, 29, 1, 7, 11, 20, 12, 31, 26, 20, 15, 4, 24, 8, 19, 5, 12, 20, 21, 32, 14, 31, 24, 17, 9, 27, 3, 10, 13, 20, 26, 10, 13, 14, 8, 11, 20, 3, 12, 20, 22, 15, 30, 23, 8, 6, 19, 27, 13, 18, 16, 8, 5, 19, 5, 13, 27, 15, 6, 10, 22, 20, 19, 6, 15, 13, 14, 28, 8, 20, 21, 14, 15, 23, 2, 18, 27, 20, 19, 4, 12, 24, 17, 20, 13, 31, 12, 20, 18, 28, 25, 17, 8, 18, 20, 28, 5, 1, 13, 17, 8, 20, 17, 28, 24, 15, 27, 22, 2, 31, 18, 23, 9, 28, 8, 12, 11, 13, 21, 18, 25, 17, 28, 23, 7, 15, 22, 28, 8, 32, 28, 10, 17, 29, 21, 15, 9, 10, 15, 25, 22, 1, 27, 22, 15, 20, 23, 3, 14, 9, 18, 11, 12, 9, 32, 11, 3, 12, 6, 1, 18, 17, 20, 24, 29, 20, 15, 10, 7, 26, 12, 7, 18, 23, 5, 15, 28, 6, 13, 10, 19, 10, 17, 32, 27, 13, 1, 28, 8, 22, 6, 18, 26, 9, 2, 11, 12, 17, 16, 32, 26, 25, 10, 18, 32, 19, 20, 13, 3, 20, 22, 32, 13, 32, 28, 22, 15, 15, 9, 12, 27, 20, 18, 4, 25, 8, 7, 11, 12, 31, 8, 12, 11, 20, 28, 10, 13, 31, 26, 17, 9, 2, 24, 28, 19, 8, 15, 12, 4, 18, 20, 25, 2, 29, 24, 15, 8, 9, 3, 11, 15, 18, 20, 28, 3, 6, 7, 25, 15, 18, 20, 25, 3, 8, 15, 27, 12, 23, 30, 17, 8, 15, 6, 10, 21, 4, 12, 20, 22, 17, 16, 23, 5, 20, 25, 10, 15, 26, 17, 5, 22, 16, 17, 2, 11, 17, 30, 12, 11, 29, 19, 23, 12, 16, 12, 3, 27, 29, 22, 17, 9, 20, 15, 25, 24, 5, 9, 12, 11, 20, 18, 28, 24, 4, 12, 20, 18, 24, 12, 7, 17, 20, 28, 15, 23, 13, 10, 30, 17, 31, 23, 17, 8, 9, 6, 5, 17, 28, 8, 5, 13, 20, 15, 4, 25, 17, 22, 31, 8, 28, 13, 1, 19, 26, 22, 17, 9, 27, 8, 12, 11, 15, 10, 29, 32, 22, 28, 17, 8, 15, 21, 29, 8, 12, 16, 32, 28, 9, 30, 11, 2, 17, 28, 24, 8, 17, 6, 1, 23, 8, 22, 5, 12, 10, 23, 32, 17, 18, 8, 13, 4, 25, 7, 22, 28, 20, 24, 10, 12, 17, 5, 19, 15, 30, 12, 4, 23, 20, 25, 32, 11, 8, 10, 11, 18, 20, 23, 3, 11, 6, 12, 30, 18, 4, 18, 25, 12, 20, 29, 13, 15, 27, 12, 31, 24, 13, 16, 32, 22, 28, 18, 12, 9, 23, 10, 13, 14, 24, 20, 15, 14, 1, 30, 25, 23, 7, 22, 32, 13, 10, 15, 31, 28, 9, 6, 11, 2, 32, 21, 13, 8, 30, 22, 15, 8, 28, 2, 18, 22, 23, 28, 17, 8, 12, 20, 28, 32, 10, 21, 29, 15, 32, 30, 24, 9, 20, 17, 7, 24, 29, 15, 8, 7, 18, 7, 13, 26, 15, 20, 26, 3, 32, 1, 7, 11, 20, 19, 4, 25, 5, 17, 26, 11, 8, 17, 11, 4, 15, 9, 11, 22, 18, 9, 11, 14, 18, 23, 29, 9, 8, 10, 11, 13, 10, 13, 19, 4, 12, 20, 27, 3, 9, 10, 11, 18, 8, 32, 12, 11, 18, 7, 12, 26, 20, 32, 13, 24, 4, 18, 26, 11, 6, 17, 1, 12, 32, 13, 6, 18, 20, 22, 5, 12, 10, 19, 4, 14, 20, 22, 3, 13, 29, 9, 12, 13, 5, 23, 28, 18, 32, 19, 24, 8, 19, 24, 28, 8, 15, 18, 23, 9, 22, 23, 28, 9, 20, 28, 10, 14, 5, 18, 26, 12, 10, 24, 2, 14, 28, 17, 20, 13, 25, 10, 17, 32, 16, 15, 10, 21, 10, 8, 11, 17, 31, 22, 25, 17, 10, 8, 12, 28, 9, 26, 11, 12, 17, 9, 11, 3, 1, 7, 22, 31, 8, 32, 11, 16, 1, 18, 26, 11, 22, 3, 10, 13, 10, 9, 12, 15, 28, 2, 17, 21, 10, 9, 11, 14, 20, 17, 30, 23, 20, 23, 10, 11, 22, 20, 16, 2, 15, 21, 29, 9, 20, 28, 4, 23, 17, 20, 27, 2, 20, 17, 31, 25, 20, 7, 4, 11, 18, 4, 12, 25, 16, 17, 3, 23, 20, 18, 3, 24, 18, 23, 27, 8, 9, 2, 11, 5, 9, 10, 11, 13, 6, 13, 26, 23, 7, 23, 27, 18, 18, 27, 23, 5, 10, 22, 15, 4, 5, 8, 12, 11, 5, 13, 20, 18, 17, 2, 19, 15, 28, 17, 5, 23, 26, 23, 17, 9, 26, 17, 3, 22, 26, 9, 5, 13, 29, 17, 2, 24, 31, 23, 26, 17, 26, 15, 5, 22, 15, 20, 28, 9, 20, 22, 3, 14, 8, 9, 2, 14, 20, 29, 4, 24, 8, 9, 1, 30, 21, 9, 26, 24, 15, 8, 12, 28, 17, 20, 28, 8, 25, 7, 2, 12, 9, 28, 12, 13, 8, 19, 11, 14, 8, 5, 11, 12, 4, 18, 25, 13, 30, 19, 10, 13, 29, 16, 9, 23, 15, 8, 11, 20, 29, 21, 15, 8, 8, 29, 11, 12, 32, 9, 12, 13, 6, 17, 13, 12, 26, 21, 15, 8, 16, 15, 30, 22, 26, 17, 31, 23, 9, 5, 11, 15, 23, 8, 11, 16, 27, 6, 15, 22, 7, 24, 29, 18, 30, 13, 3, 24, 13, 11, 29, 19, 28, 17, 20, 12, 1, 21, 29, 13, 1, 21, 27, 12, 2, 15, 10, 21, 3, 19, 26, 12, 25, 32, 15, 9, 9, 10, 11, 3, 27, 23, 17, 9, 16, 12, 23, 32, 23, 2, 10, 13, 28, 3, 19, 22, 15, 31, 19, 11, 20, 23, 11, 15, 20, 17, 10, 24, 20, 19, 32, 13, 5, 22, 26, 18, 12, 26, 19, 5, 20, 18, 31, 25, 10, 23, 3, 14, 8, 2, 11, 12, 26, 12, 6, 18, 32, 25, 17, 9, 28, 6, 19, 22, 7, 23, 32, 13, 10, 18, 1, 14, 26, 18, 4, 12, 10, 8, 11, 13, 23, 12, 29, 19, 10, 9, 12, 27, 17, 20, 24, 28, 32, 21, 13, 9, 29, 16, 9, 22, 10, 11, 29, 19, 10, 9, 11, 23, 6, 12, 30, 17, 23, 1, 10, 18, 24, 4, 10, 13, 17, 20, 12, 11, 28, 17, 2, 23, 4, 23, 28, 18, 19, 6, 13, 27, 1, 21, 28, 12, 19, 20, 12, 3, 6, 18, 7, 5, 6, 23, 4, 9, 26, 12, 4, 19, 9, 21, 11, 14, 30, 18, 10, 24, 10, 21, 4, 14, 15, 24, 27, 21, 15, 16, 32, 22, 20, 17, 3, 25, 2, 12, 20, 22, 15, 28, 5, 8, 21, 9, 32, 25, 14, 28, 19, 9, 18, 32, 5, 8, 22, 20, 12, 32, 29, 11, 16, 17, 17, 20, 24, 27, 28, 11, 5, 19, 13, 30, 19, 7, 22, 6, 17, 27, 22, 25, 29, 8, 31, 20, 24, 14, 22, 32, 15, 9, 30, 9, 11, 15, 18, 29, 12, 9, 26, 8, 12, 11, 12, 25, 18, 5, 8, 27, 11, 15, 27, 3, 19, 22, 1, 15, 29, 9, 26, 14, 9, 19, 3, 15, 20, 23, 23, 25, 32, 12, 17, 30, 5, 8, 18, 32, 12, 8, 24, 10, 5, 17, 6, 22, 27, 17, 29, 18, 3, 24, 17, 16, 23, 4, 9, 22, 11, 12, 18, 20, 25, 4, 9, 19, 13, 14, 16, 8, 11, 20, 17, 21, 31, 8, 1, 4, 19, 31, 16, 19, 23, 8, 1, 24, 29, 18, 3, 23, 28, 18, 27, 8, 11, 15, 29, 25, 17, 9, 20, 22, 4, 14, 29, 6, 10, 11, 15, 27, 22, 5, 10, 23, 30, 18, 13, 1, 29, 8, 22, 4, 17, 27, 17, 10, 28, 32, 24, 8, 11, 15, 21, 10, 15, 32, 13, 2, 29, 8, 6, 12, 25, 24, 14, 30, 18, 8, 9, 18, 13, 14, 21, 10, 13, 5, 31, 24, 17, 8, 3, 23, 28, 15, 26, 8, 32, 23, 21, 3, 15, 26, 20, 15, 6, 23, 20, 23, 10, 15, 21, 2, 15, 26, 14, 8, 11, 30, 28, 18, 13, 8, 27, 21, 15, 8, 3, 15, 20, 21, 20, 18, 4, 12, 9, 8, 1, 30, 20, 19, 5, 13, 17, 22, 29, 9, 21, 24, 29, 8, 12, 32, 25, 23, 19, 22, 29, 9, 18, 5, 11, 27, 17, 22, 28, 9, 27, 2, 18, 22, 22, 28, 17, 9, 13, 32, 18, 9, 32, 26, 17, 9, 8, 17, 2, 13, 18, 29, 12, 8, 8, 9, 2, 32, 26, 13, 8, 17, 16, 17, 5, 11, 1, 17, 20, 13, 20, 23, 6, 17, 32, 13, 7, 23, 20, 22, 2, 11, 31, 29, 24, 8, 6, 22, 27, 15, 17, 24, 29, 8, 8, 2, 11, 15, 9, 27, 11, 12, 23, 10, 15, 2, 24, 12, 21, 27, 7, 9, 11, 15, 10, 12, 25, 18, 18, 6, 13, 25, 5, 19, 27, 13, 16, 8, 11, 4, 28, 18, 5, 23, 4, 9, 12, 13, 20, 18, 2, 26, 16, 17, 23, 32, 6, 15, 30, 21, 10, 19, 2, 14, 18, 32, 24, 9, 6, 25, 14, 12, 20, 12, 29, 28, 18, 20, 27, 4, 29, 23, 15, 8, 8, 19, 13, 14, 18, 26, 31, 8, 14, 29, 19, 8, 8, 18, 32, 14, 29, 12, 4, 22, 8, 2, 11, 5, 2, 18, 25, 11, 8, 4, 11, 15, 20, 18, 2, 28, 13, 25, 19, 3, 27, 14, 9, 19, 22, 4, 15, 27, 31, 17, 10, 23, 32, 24, 18, 8, 21, 20, 15, 29, 19, 4, 12, 25, 10, 13, 26, 23, 32, 8, 12, 11, 27, 15, 31, 24, 28, 10, 15, 19, 30, 19, 23, 24, 22, 24, 29, 9, 15, 25, 5, 8, 25, 9, 11, 15, 1, 7, 25, 31, 31, 15, 9, 22, 31, 18, 12, 8, 28, 6, 15, 21, 23, 7, 17, 28, 20, 18, 3, 28, 4, 24, 27, 28, 32, 13, 7, 24, 3, 13, 18, 9, 20, 15, 1, 23, 6, 8, 5, 17, 18, 20, 12, 32, 23, 6, 8, 4, 4, 12, 20, 17, 28, 1, 10, 21, 2, 12, 20, 18, 5, 20, 27, 13, 32, 19, 23, 24, 6, 11, 26, 23, 2, 22, 26, 18, 25, 5, 22, 28, 28, 17, 4, 23, 12, 29, 20, 18, 20, 19, 29, 24, 1, 15, 29, 8, 2, 8, 12, 11, 17, 26, 22, 5, 32, 14, 9, 22, 17, 16, 28, 32, 12, 20, 28, 2, 31, 15, 9, 23, 28, 21, 15, 8, 29, 1, 17, 32, 17, 16, 23, 3, 20, 17, 30, 12, 8, 17, 32, 13, 20, 19, 4, 26, 18, 20, 27, 5, 8, 3, 11, 5, 9, 24, 11, 16, 5, 23, 29, 15, 7, 22, 29, 15, 23, 10, 13, 5, 20, 17, 4, 27, 31, 12, 4, 23, 23, 32, 17, 8, 2, 22, 26, 15, 22, 2, 18, 26, 20, 18, 7, 24, 2, 17, 20, 21, 27, 10, 15, 19, 27, 6, 19, 22, 25, 22, 17, 9, 3, 13, 10, 18, 18, 32, 24, 8, 18, 5, 11, 26, 32, 16, 23, 8, 8, 30, 11, 12, 20, 18, 4, 28, 1, 15, 28, 9, 14, 8, 11, 21, 32, 23, 20, 19, 8, 23, 5, 12, 15, 27, 5, 8, 1, 21, 26, 12, 28, 15, 5, 22, 15, 18, 24, 9, 25, 32, 17, 9, 9, 18, 32, 14, 29, 8, 11, 17, 3, 19, 25, 12, 13, 26, 19, 3, 25, 8, 12, 13, 20, 28, 24, 4, 15, 24, 32, 8, 13, 28, 25, 32, 20, 24, 10, 11, 20, 24, 2, 11, 22, 20, 16, 3, 25, 5, 21, 29, 24, 10, 15, 2, 28, 1, 17, 22, 15, 20, 28, 5, 21, 31, 15, 9, 20, 17, 10, 25, 27, 1, 17, 22, 18, 24, 31, 8, 24, 10, 5, 15, 1, 24, 27, 28, 6, 30, 19, 12, 27, 9, 11, 15, 13, 27, 19, 3, 28, 6, 14, 22, 15, 10, 28, 32, 22, 5, 12, 29, 9, 26, 12, 13, 20, 13, 32, 26, 15, 16, 32, 28, 5, 22, 29, 12, 20, 17, 4, 7, 22, 7, 15, 28, 17, 16, 32, 29, 6, 31, 14, 12, 17, 20, 29, 4, 8, 23, 11, 16, 28, 18, 9, 23, 20, 19, 10, 13, 2, 14, 10, 21, 20, 15, 26, 24, 8, 22, 11, 12, 32, 12, 16, 17, 15, 23, 31, 8, 29, 3, 12, 22, 17, 2, 10, 22, 24, 31, 15, 8, 20, 19, 3, 24, 20, 23, 28, 9, 9, 25, 11, 16, 23, 7, 2, 12, 28, 19, 22, 15, 20, 18, 1, 23, 1, 13, 17, 9, 9, 15, 2, 12, 10, 8, 11, 3, 22, 9, 15, 32, 6, 19, 4, 9, 29, 28, 23, 9, 8, 10, 11, 21, 28, 3, 14, 22, 7, 21, 28, 14, 18, 32, 12, 9, 6, 22, 20, 24, 18, 20, 26, 5, 29, 12, 2, 23, 12, 30, 23, 4, 16, 15, 32, 28, 23, 10, 17, 31, 21, 5, 10, 11, 17, 16, 32, 23, 17, 31, 12, 9, 27, 1, 8, 11, 21, 8, 31, 25, 24, 32, 15, 9, 26, 5, 10, 11, 20, 22, 4, 13, 32, 15, 10, 23, 24, 20, 12, 32, 5, 13, 30, 19, 28, 15, 8, 21, 15, 6, 1, 21, 32, 30, 24, 8, 13, 20, 28, 32, 29, 1, 16, 32, 18, 20, 8, 5, 26, 18, 32, 23, 9, 8, 4, 23, 19, 8, 28, 15, 20, 18, 3, 11, 20, 27, 14, 15, 32, 23, 18, 27, 25, 14, 10, 18, 20, 18, 4, 13, 10, 25, 31, 18, 25, 17, 20, 12, 13, 27, 32, 23, 17, 20, 25, 4, 20, 18, 6, 23, 15, 21, 28, 9, 10, 12, 6, 17, 15, 20, 27, 2, 32, 16, 8, 24, 1, 13, 10, 17, 27, 13, 23, 32, 8, 24, 11, 15, 9, 16, 12, 24, 27, 17, 2, 22, 10, 12, 1, 17, 8, 21, 11, 12, 9, 20, 11, 13, 2, 24, 27, 28, 10, 15, 23, 3, 22, 25, 29, 9, 32, 17, 20, 21, 5, 18, 28, 11, 17, 31, 12, 8, 23, 29, 17, 8, 16, 18, 3, 11, 20, 12, 4, 29, 20, 22, 2, 14, 19, 15, 8, 7, 27, 3, 15, 22, 8, 10, 11, 3, 14, 2, 18, 11, 29, 20, 23, 15, 6, 29, 22, 15, 28, 13, 5, 22, 4, 21, 25, 15, 20, 26, 13, 15, 31, 26, 17, 8, 20, 24, 31, 12, 25, 13, 3, 18, 16, 18, 7, 32, 4, 18, 27, 11, 21, 5, 12, 29, 20, 19, 2, 25, 25, 12, 2, 19, 20, 24, 32, 13, 28, 20, 15, 11, 20, 21, 10, 11, 21, 8, 31, 26, 8, 23, 11, 15, 20, 18, 3, 13, 30, 6, 17, 23, 15, 20, 24, 31, 5, 21, 27, 13, 10, 17, 6, 13, 31, 16, 9, 23, 1, 22, 29, 12, 7, 28, 32, 23, 22, 6, 20, 24, 1, 17, 20, 12, 8, 17, 32, 23, 30, 17, 4, 24, 18, 20, 29, 3, 19, 3, 13, 25, 12, 20, 4, 7, 9, 21, 11, 12, 28, 13, 7, 21, 20, 18, 3, 29, 8, 3, 11, 15, 30, 17, 21, 12, 15, 20, 29, 3, 10, 23, 30, 15, 9, 22, 5, 12, 19, 7, 13, 28, 32, 28, 10, 15, 32, 8, 12, 14, 15, 8, 12, 29, 32, 15, 8, 23, 10, 23, 4, 15, 15, 16, 32, 23, 15, 20, 27, 8, 1, 28, 20, 32, 8, 18, 13, 14, 22, 10, 17, 31, 19, 32, 25, 11, 30, 24, 19, 8, 32, 15, 20, 22, 30, 13, 4, 23, 22, 20, 15, 4, 31, 24, 15, 9, 16, 17, 31, 11, 22, 19, 28, 8, 24, 29, 17, 9, 10, 9, 11, 3, 8, 30, 12, 11, 27, 17, 10, 22, 19, 6, 15, 23, 29, 21, 31, 30, 4, 15, 20, 22, 18, 32, 23, 8, 32, 9, 11, 15, 10, 12, 32, 26, 12, 20, 27, 2, 8, 18, 32, 15, 2, 17, 19, 15, 10, 15, 26, 22, 27, 15, 32, 24, 29, 24, 19, 8, 15, 8, 12, 25, 31, 23, 26, 18, 20, 22, 10, 14, 32, 17, 23, 9, 30, 17, 22, 24, 24, 7, 10, 11, 2, 26, 21, 15, 32, 24, 18, 9, 6, 7, 32, 29, 17, 21, 32, 9, 24, 20, 21, 19, 8, 28, 11, 15, 32, 18, 10, 25, 6, 22, 32, 13, 20, 11, 32, 27, 9, 6, 17, 2, 22, 5, 10, 11, 13, 3, 17, 8, 30, 13, 2, 23, 29, 13, 7, 22, 18, 24, 12, 3, 10, 9, 12, 28, 32, 18, 23, 8, 32, 17, 10, 24, 24, 2, 19, 28, 24, 3, 18, 29, 17, 26, 32, 8, 18, 6, 10, 12, 4, 13, 23, 8, 21, 6, 15, 27, 10, 15, 22, 3, 20, 15, 28, 24, 8, 10, 12, 26, 21, 18, 29, 8, 12, 1, 6, 18, 31, 12, 20, 19, 6, 23, 30, 31, 2, 21, 27, 12, 15, 16, 32, 21, 28, 13, 8, 18, 28, 23, 13, 9, 19, 7, 12, 29, 17, 22, 27, 8, 28, 24, 15, 9, 1, 24, 19, 12, 16, 15, 30, 21, 10, 12, 3, 18, 21, 30, 15, 8, 15, 16, 32, 24, 3, 12, 19, 18, 8, 9, 2, 10, 3, 21, 27, 13, 2, 19, 26, 12, 28, 20, 8, 3, 23, 2, 10, 17, 21, 8, 11, 16, 20, 12, 5, 28, 14, 9, 11, 19, 3, 9, 12, 11, 31, 24, 20, 19, 20, 19, 4, 27, 6, 32, 14, 12, 17, 3, 10, 27, 31, 1, 7, 11, 10, 13, 32, 29, 12, 30, 31, 29, 17, 16, 24, 32, 26, 10, 7, 13, 20, 17, 1, 24, 28, 24, 19, 8, 12, 10, 18, 29, 29, 6, 15, 22, 18, 6, 10, 11, 17, 7, 12, 13, 12, 28, 18, 7, 13, 22, 25, 19, 20, 18, 1, 13, 10, 9, 11, 24, 31, 18, 5, 8, 10, 9, 11, 17, 25, 3, 10, 13, 21, 5, 15, 27, 16, 15, 10, 23, 8, 15, 26, 12, 29, 1, 19, 32, 32, 24, 10, 17, 8, 15, 2, 12, 17, 16, 11, 31, 6, 21, 24, 18, 30, 27, 23, 8, 15, 1, 29, 8, 11, 15, 20, 21, 3, 13, 17, 8, 17, 21, 28, 9, 27, 18, 9, 23, 6, 24, 4, 8, 10, 8, 11, 22, 17, 24, 32, 8, 12, 21, 15, 9, 31, 16, 8, 23, 4, 23, 29, 15, 32, 28, 23, 9, 15, 20, 29, 8, 30, 7, 4, 11, 22, 11, 5, 17, 3, 13, 18, 8, 22, 32, 9, 7, 26, 7, 21, 31, 1, 23, 15, 11, 20, 17, 4, 29, 22, 7, 13, 28, 32, 24, 20, 19, 2, 15, 20, 22, 7, 23, 3, 11, 16, 15, 2, 23, 8, 30, 24, 25, 17, 2, 10, 23, 5, 24, 27, 28, 23, 32, 15, 14, 8, 1, 11, 16, 3, 13, 20, 18, 10, 12, 16, 17, 23, 1, 10, 15, 6, 21, 4, 9, 22, 3, 12, 15, 1, 20, 25, 15, 22, 20, 14, 2, 17, 24, 29, 9, 18, 3, 13, 25, 15, 8, 12, 22, 23, 10, 5, 15, 21, 20, 12, 5, 5, 15, 20, 21, 15, 25, 19, 8, 26, 12, 6, 17, 8, 18, 11, 14, 6, 15, 20, 21, 31, 11, 16, 17, 1, 19, 10, 13, 1, 32, 25, 15, 17, 16, 32, 25, 23, 9, 5, 12, 10, 22, 15, 3, 15, 17, 23, 9, 22, 29, 31, 30, 22, 10, 14, 15, 23, 4, 10, 13, 15, 9, 11, 20, 24, 3, 17, 29, 4, 32, 25, 15, 28, 20, 4, 24, 27, 16, 8, 22, 17, 3, 10, 23, 30, 11, 4, 21, 27, 12, 32, 24, 23, 32, 5, 8, 20, 19, 3, 13, 32, 26, 17, 8, 1, 23, 10, 11, 24, 31, 17, 9, 19, 2, 13, 26, 17, 21, 29, 9, 24, 12, 5, 18, 9, 14, 11, 3, 23, 4, 15, 28, 31, 21, 7, 27, 29, 12, 5, 21, 8, 24, 5, 12, 1, 5, 24, 31, 6, 28, 4, 9, 20, 18, 1, 24, 18, 8, 11, 14, 15, 20, 24, 4, 23, 3, 18, 28, 23, 10, 15, 31, 4, 13, 10, 18, 20, 22, 2, 15, 27, 32, 14, 22, 18, 26, 32, 8, 28, 12, 7, 19, 24, 20, 9, 31, 9, 1, 11, 12, 28, 12, 32, 25, 22, 6, 2, 11, 6, 23, 4, 8, 28, 20, 15, 9, 12, 25, 1, 17, 16, 17, 7, 32, 2, 18, 26, 11, 10, 9, 12, 13, 8, 27, 11, 12, 32, 18, 10, 12, 13, 25, 19, 5, 15, 22, 19, 29, 23, 20, 15, 32, 19, 29, 12, 8, 27, 1, 15, 22, 4, 12, 20, 19, 20, 12, 31, 29, 16, 19, 23, 9, 24, 25, 32, 13, 5, 13, 20, 17, 25, 22, 17, 32, 7, 12, 20, 18, 4, 20, 25, 15, 20, 28, 6, 23, 26, 18, 31, 23, 14, 27, 18, 9, 16, 15, 30, 23, 12, 24, 15, 9, 12, 16, 32, 22, 19, 20, 12, 31, 29, 17, 3, 24, 9, 15, 12, 4, 10, 12, 4, 18, 17, 1, 6, 22, 13, 1, 29, 9, 15, 30, 19, 8, 23, 15, 9, 19, 15, 17, 28, 8, 13, 25, 19, 2, 9, 23, 5, 12, 30, 12, 7, 19, 18, 6, 30, 23, 23, 3, 17, 27, 1, 31, 24, 15, 4, 19, 28, 13, 1, 29, 25, 24, 1, 18, 10, 12, 4, 22, 27, 17, 30, 27, 23, 9, 23, 21, 17, 8, 8, 5, 11, 15, 32, 12, 20, 19, 20, 21, 32, 11, 28, 20, 24, 4, 16, 32, 23, 9, 29, 11, 1, 18, 10, 24, 17, 2, 6, 9, 12, 13, 15, 31, 7, 9, 17, 20, 27, 5, 24, 5, 18, 29, 1, 22, 20, 24, 24, 25, 32, 12, 16, 23, 28, 8, 7, 22, 3, 11, 18, 16, 32, 24, 3, 23, 28, 17, 16, 17, 32, 11, 21, 20, 15, 27, 27, 15, 11, 19, 30, 17, 20, 13, 5, 13, 10, 19, 26, 6, 10, 11, 4, 14, 10, 19, 9, 20, 12, 11, 15, 10, 22, 32, 20, 19, 4, 23, 18, 20, 26, 4, 8, 4, 11, 12, 15, 20, 29, 9, 27, 15, 2, 22, 29, 22, 17, 8, 15, 27, 19, 9, 6, 22, 14, 12, 29, 13, 3, 23, 24, 3, 10, 13, 25, 7, 19, 29, 24, 17, 15, 19, 8, 15, 12, 25, 26, 24, 12, 32, 2, 20, 26, 13, 31, 25, 15, 9, 21, 6, 29, 28, 20, 17, 10, 7, 12, 32, 20, 18, 4, 23, 20, 19, 15, 20, 27, 9, 25, 18, 4, 12, 20, 21, 2, 11, 19, 23, 27, 8, 19, 32, 24, 8, 18, 5, 13, 25, 9, 32, 11, 15, 18, 24, 28, 9, 12, 6, 18, 23, 6, 9, 11, 5, 24, 29, 17, 8, 5, 8, 11, 2, 5, 23, 27, 19, 6, 15, 20, 19, 32, 18, 10, 24, 4, 24, 29, 17, 20, 19, 3, 12, 19, 5, 15, 23, 19, 8, 11, 15, 10, 13, 30, 17, 28, 23, 15, 8, 26, 32, 17, 8, 6, 18, 30, 13, 18, 16, 32, 29, 4, 22, 29, 12, 6, 23, 15, 11, 18, 4, 11, 13, 23, 2, 19, 27, 2, 20, 25, 15, 5, 19, 28, 11, 19, 6, 10, 12, 24, 3, 19, 28, 29, 5, 10, 11, 1, 24, 18, 12, 15, 29, 19, 8, 15, 9, 12, 2, 2, 1, 31, 12, 27, 31, 12, 22, 2, 9, 12, 13, 15, 20, 5, 8, 15, 9, 12, 3, 18, 20, 12, 5, 27, 2, 17, 22, 29, 10, 31, 30, 21, 8, 26, 24, 16, 12, 24, 32, 7, 12, 20, 17, 6, 28, 32, 23, 21, 29, 31, 30, 1, 12, 6, 18, 32, 17, 23, 8, 15, 17, 29, 8, 7, 10, 15, 19, 25, 20, 8, 31, 1, 24, 18, 11, 18, 20, 9, 5, 1, 28, 18, 11, 6, 15, 20, 22, 7, 23, 28, 18, 6, 15, 30, 22, 8, 9, 31, 21, 24, 13, 8, 9, 17, 7, 19, 15, 15, 16, 24, 3, 10, 13, 24, 3, 3, 32, 25, 15, 5, 19, 26, 11, 26, 12, 1, 18, 3, 21, 25, 15, 5, 28, 22, 19, 8, 9, 5, 31, 23, 19, 28, 8, 15, 8, 12, 3, 9, 2, 11, 20, 23, 5, 17, 27, 23, 1, 10, 17, 6, 7, 26, 17, 9, 24, 11, 15, 28, 9, 11, 15, 28, 13, 1, 18, 20, 9, 12, 13, 29, 4, 13, 22, 7, 18, 4, 10, 3, 24, 28, 19, 12, 25, 17, 7, 8, 9, 4, 23, 17, 20, 26, 5, 31, 23, 15, 9, 19, 20, 9, 5, 21, 32, 26, 13, 17, 23, 32, 8, 19, 25, 12, 5, 30, 23, 15, 9, 28, 10, 14, 15, 1, 24, 19, 18, 1, 11, 29, 22, 26, 1, 18, 31, 20, 12, 4, 31, 22, 6, 14, 17, 22, 10, 17, 28, 15, 29, 24, 5, 15, 25, 5, 9, 20, 21, 28, 15, 10, 9, 11, 15, 28, 25, 17, 9, 10, 8, 11, 31, 10, 9, 11, 21, 19, 20, 25, 32, 30, 19, 10, 12, 22, 10, 15, 2, 7, 17, 4, 10, 19, 10, 14, 29, 30, 17, 10, 24, 30, 15, 10, 22, 20, 12, 4, 25, 18, 6, 9, 4, 19, 20, 28, 4, 3, 22, 26, 15, 15, 30, 19, 9, 18, 25, 11, 5, 29, 2, 10, 21, 29, 19, 7, 25, 20, 29, 10, 13, 16, 15, 32, 22, 10, 12, 1, 18, 13, 4, 17, 9, 27, 32, 13, 21, 13, 6, 10, 17, 8, 22, 11, 16, 29, 5, 15, 22, 14, 32, 25, 23, 12, 6, 1, 19, 3, 20, 27, 13, 20, 24, 2, 14, 6, 13, 1, 17, 26, 17, 10, 22, 4, 17, 20, 21, 6, 23, 31, 13, 20, 23, 4, 12, 20, 18, 2, 24, 30, 11, 3, 22, 17, 23, 31, 8, 5, 17, 20, 14, 20, 28, 14, 23, 19, 20, 12, 4, 15, 6, 28, 32, 6, 30, 25, 23, 18, 20, 9, 3, 1, 17, 10, 23, 20, 21, 30, 24, 15, 19, 24, 8, 32, 6, 19, 24, 23, 12, 8, 9, 23, 8, 5, 12, 30, 11, 5, 21, 24, 31, 17, 8, 15, 17, 23, 8, 20, 19, 1, 15, 10, 8, 11, 18, 5, 20, 30, 17, 3, 24, 17, 11, 18, 20, 9, 7, 20, 24, 3, 13, 9, 8, 7, 6, 8, 12, 15, 16, 20, 17, 30, 13, 32, 19, 13, 9, 1, 22, 18, 15, 10, 23, 17, 4, 17, 32, 23, 9, 16, 18, 24, 32, 12, 1, 6, 19, 17, 5, 12, 23, 15, 4, 30, 23, 6, 12, 30, 19, 28, 12, 2, 22, 15, 23, 32, 8, 2, 19, 24, 12, 28, 10, 7, 13, 18, 8, 13, 32, 27, 1, 12, 22, 29, 23, 18, 8, 6, 9, 5, 18, 14, 16, 32, 24, 32, 17, 10, 23, 26, 21, 17, 8, 20, 22, 11, 15, 17, 9, 13, 32, 18, 20, 26, 2, 25, 13, 4, 18, 2, 9, 11, 15, 5, 20, 29, 12, 21, 5, 11, 29, 18, 22, 12, 5, 31, 11, 4, 22, 20, 17, 5, 25, 20, 18, 6, 13, 14, 29, 19, 9, 32, 22, 15, 8, 32, 6, 1, 27, 3, 18, 24, 12, 17, 25, 32, 8, 2, 15, 29, 9, 2, 21, 25, 15, 2, 13, 10, 18, 6, 17, 21, 13, 32, 24, 19, 15, 32, 17, 5, 8, 20, 19, 4, 14, 30, 12, 6, 19, 24, 32, 17, 27, 4, 8, 12, 11, 23, 32, 17, 11, 26, 18, 3, 22, 20, 19, 31, 13, 19, 7, 15, 23, 32, 29, 24, 8, 22, 20, 15, 14, 13, 25, 18, 3, 21, 2, 12, 26, 13, 3, 28, 8, 1, 18, 24, 12, 6, 12, 20, 22, 3, 22, 28, 15, 30, 14, 5, 23, 18, 20, 8, 32, 3, 1, 31, 18, 22, 4, 10, 11, 20, 5, 13, 27, 15, 21, 27, 8, 10, 22, 17, 2, 18, 6, 8, 4, 28, 21, 14, 8, 18, 9, 13, 3, 22, 5, 30, 18, 12, 21, 18, 25, 30, 13, 6, 18, 17, 19, 29, 9, 2, 20, 27, 12, 1, 17, 13, 11, 9, 16, 12, 25, 9, 8, 31, 21, 30, 18, 4, 24, 6, 13, 25, 24, 18, 8, 12, 14, 28, 20, 15, 13, 6, 18, 30, 12, 19, 24, 29, 9, 18, 2, 12, 25, 8, 16, 11, 30, 10, 17, 20, 14, 20, 21, 4, 17, 9, 10, 11, 25, 20, 27, 10, 15, 29, 1, 14, 32, 23, 28, 17, 9, 23, 31, 17, 9, 3, 20, 27, 12, 2, 8, 11, 5, 22, 1, 15, 28, 11, 21, 8, 9, 25, 32, 15, 8, 31, 24, 15, 8, 7, 24, 31, 15, 25, 7, 21, 29, 14, 9, 11, 25, 1, 15, 20, 31, 14, 15, 6, 19, 12, 30, 21, 5, 26, 8, 11, 15, 6, 12, 20, 19, 25, 21, 17, 8, 28, 4, 10, 17, 6, 13, 26, 24, 17, 2, 12, 21, 2, 22, 20, 24, 32, 23, 15, 9, 27, 15, 20, 21, 15, 28, 19, 8, 10, 12, 30, 19, 7, 9, 11, 20, 24, 10, 21, 27, 12, 32, 25, 22, 17, 16, 22, 3, 1, 11, 25, 18, 18, 25, 22, 32, 29, 18, 9, 24, 20, 28, 10, 23, 12, 4, 18, 21, 10, 22, 17, 4, 9, 17, 4, 13, 20, 19, 2, 26, 28, 22, 10, 7, 17, 29, 5, 8, 22, 9, 11, 15, 17, 6, 10, 23, 17, 7, 12, 24, 3, 24, 27, 28, 6, 7, 26, 18, 16, 21, 28, 8, 23, 15, 12, 18, 17, 20, 29, 2, 8, 6, 5, 18, 5, 28, 21, 17, 21, 5, 13, 27, 3, 23, 20, 19, 19, 30, 24, 13, 18, 6, 1, 12, 6, 23, 20, 13, 19, 30, 31, 29, 22, 6, 12, 32, 32, 21, 12, 8, 3, 18, 25, 13, 20, 11, 25, 24, 31, 4, 15, 24, 22, 24, 13, 18, 2, 12, 16, 17, 20, 22, 3, 12, 20, 11, 24, 17, 14, 30, 19, 9, 20, 15, 2, 26, 20, 17, 10, 12, 14, 28, 18, 8, 21, 12, 25, 18, 25, 12, 19, 32, 6, 12, 26, 24, 22, 8, 12, 14, 10, 18, 32, 28, 2, 21, 26, 12, 27, 14, 5, 22, 15, 10, 30, 21, 1, 14, 10, 18, 20, 12, 1, 17, 4, 12, 30, 18, 15, 31, 19, 8, 28, 2, 10, 15, 26, 16, 32, 22, 5, 26, 30, 21, 23, 20, 14, 2, 17, 30, 12, 8, 6, 29, 4, 9, 15, 10, 24, 32, 27, 3, 10, 18
};

#define num_op_op 3840
int op_op_combos[num_op_op] = {
  1, 17, 2, 18, 1, 17, 3, 19, 1, 17, 4, 20, 1, 17, 5, 21, 1, 17, 6, 22, 1, 17, 7, 23, 1, 17, 8, 24, 1, 17, 9, 25, 1, 17, 10, 26, 1, 17, 11, 27, 1, 17, 12, 28, 1, 17, 13, 29, 1, 17, 14, 30, 1, 17, 15, 31, 1, 17, 16, 32, 1, 17, 18, 2, 1, 17, 19, 3, 1, 17, 20, 4, 1, 17, 21, 5, 1, 17, 22, 6, 1, 17, 23, 7, 1, 17, 24, 8, 1, 17, 25, 9, 1, 17, 26, 10, 1, 17, 27, 11, 1, 17, 28, 12, 1, 17, 29, 13, 1, 17, 30, 14, 1, 17, 31, 15, 1, 17, 32, 16, 2, 18, 1, 17, 2, 18, 3, 19, 2, 18, 4, 20, 2, 18, 5, 21, 2, 18, 6, 22, 2, 18, 7, 23, 2, 18, 8, 24, 2, 18, 9, 25, 2, 18, 10, 26, 2, 18, 11, 27, 2, 18, 12, 28, 2, 18, 13, 29, 2, 18, 14, 30, 2, 18, 15, 31, 2, 18, 16, 32, 2, 18, 17, 1, 2, 18, 19, 3, 2, 18, 20, 4, 2, 18, 21, 5, 2, 18, 22, 6, 2, 18, 23, 7, 2, 18, 24, 8, 2, 18, 25, 9, 2, 18, 26, 10, 2, 18, 27, 11, 2, 18, 28, 12, 2, 18, 29, 13, 2, 18, 30, 14, 2, 18, 31, 15, 2, 18, 32, 16, 3, 19, 1, 17, 3, 19, 2, 18, 3, 19, 4, 20, 3, 19, 5, 21, 3, 19, 6, 22, 3, 19, 7, 23, 3, 19, 8, 24, 3, 19, 9, 25, 3, 19, 10, 26, 3, 19, 11, 27, 3, 19, 12, 28, 3, 19, 13, 29, 3, 19, 14, 30, 3, 19, 15, 31, 3, 19, 16, 32, 3, 19, 17, 1, 3, 19, 18, 2, 3, 19, 20, 4, 3, 19, 21, 5, 3, 19, 22, 6, 3, 19, 23, 7, 3, 19, 24, 8, 3, 19, 25, 9, 3, 19, 26, 10, 3, 19, 27, 11, 3, 19, 28, 12, 3, 19, 29, 13, 3, 19, 30, 14, 3, 19, 31, 15, 3, 19, 32, 16, 4, 20, 1, 17, 4, 20, 2, 18, 4, 20, 3, 19, 4, 20, 5, 21, 4, 20, 6, 22, 4, 20, 7, 23, 4, 20, 8, 24, 4, 20, 9, 25, 4, 20, 10, 26, 4, 20, 11, 27, 4, 20, 12, 28, 4, 20, 13, 29, 4, 20, 14, 30, 4, 20, 15, 31, 4, 20, 16, 32, 4, 20, 17, 1, 4, 20, 18, 2, 4, 20, 19, 3, 4, 20, 21, 5, 4, 20, 22, 6, 4, 20, 23, 7, 4, 20, 24, 8, 4, 20, 25, 9, 4, 20, 26, 10, 4, 20, 27, 11, 4, 20, 28, 12, 4, 20, 29, 13, 4, 20, 30, 14, 4, 20, 31, 15, 4, 20, 32, 16, 5, 21, 1, 17, 5, 21, 2, 18, 5, 21, 3, 19, 5, 21, 4, 20, 5, 21, 6, 22, 5, 21, 7, 23, 5, 21, 8, 24, 5, 21, 9, 25, 5, 21, 10, 26, 5, 21, 11, 27, 5, 21, 12, 28, 5, 21, 13, 29, 5, 21, 14, 30, 5, 21, 15, 31, 5, 21, 16, 32, 5, 21, 17, 1, 5, 21, 18, 2, 5, 21, 19, 3, 5, 21, 20, 4, 5, 21, 22, 6, 5, 21, 23, 7, 5, 21, 24, 8, 5, 21, 25, 9, 5, 21, 26, 10, 5, 21, 27, 11, 5, 21, 28, 12, 5, 21, 29, 13, 5, 21, 30, 14, 5, 21, 31, 15, 5, 21, 32, 16, 6, 22, 1, 17, 6, 22, 2, 18, 6, 22, 3, 19, 6, 22, 4, 20, 6, 22, 5, 21, 6, 22, 7, 23, 6, 22, 8, 24, 6, 22, 9, 25, 6, 22, 10, 26, 6, 22, 11, 27, 6, 22, 12, 28, 6, 22, 13, 29, 6, 22, 14, 30, 6, 22, 15, 31, 6, 22, 16, 32, 6, 22, 17, 1, 6, 22, 18, 2, 6, 22, 19, 3, 6, 22, 20, 4, 6, 22, 21, 5, 6, 22, 23, 7, 6, 22, 24, 8, 6, 22, 25, 9, 6, 22, 26, 10, 6, 22, 27, 11, 6, 22, 28, 12, 6, 22, 29, 13, 6, 22, 30, 14, 6, 22, 31, 15, 6, 22, 32, 16, 7, 23, 1, 17, 7, 23, 2, 18, 7, 23, 3, 19, 7, 23, 4, 20, 7, 23, 5, 21, 7, 23, 6, 22, 7, 23, 8, 24, 7, 23, 9, 25, 7, 23, 10, 26, 7, 23, 11, 27, 7, 23, 12, 28, 7, 23, 13, 29, 7, 23, 14, 30, 7, 23, 15, 31, 7, 23, 16, 32, 7, 23, 17, 1, 7, 23, 18, 2, 7, 23, 19, 3, 7, 23, 20, 4, 7, 23, 21, 5, 7, 23, 22, 6, 7, 23, 24, 8, 7, 23, 25, 9, 7, 23, 26, 10, 7, 23, 27, 11, 7, 23, 28, 12, 7, 23, 29, 13, 7, 23, 30, 14, 7, 23, 31, 15, 7, 23, 32, 16, 8, 24, 1, 17, 8, 24, 2, 18, 8, 24, 3, 19, 8, 24, 4, 20, 8, 24, 5, 21, 8, 24, 6, 22, 8, 24, 7, 23, 8, 24, 9, 25, 8, 24, 10, 26, 8, 24, 11, 27, 8, 24, 12, 28, 8, 24, 13, 29, 8, 24, 14, 30, 8, 24, 15, 31, 8, 24, 16, 32, 8, 24, 17, 1, 8, 24, 18, 2, 8, 24, 19, 3, 8, 24, 20, 4, 8, 24, 21, 5, 8, 24, 22, 6, 8, 24, 23, 7, 8, 24, 25, 9, 8, 24, 26, 10, 8, 24, 27, 11, 8, 24, 28, 12, 8, 24, 29, 13, 8, 24, 30, 14, 8, 24, 31, 15, 8, 24, 32, 16, 9, 25, 1, 17, 9, 25, 2, 18, 9, 25, 3, 19, 9, 25, 4, 20, 9, 25, 5, 21, 9, 25, 6, 22, 9, 25, 7, 23, 9, 25, 8, 24, 9, 25, 10, 26, 9, 25, 11, 27, 9, 25, 12, 28, 9, 25, 13, 29, 9, 25, 14, 30, 9, 25, 15, 31, 9, 25, 16, 32, 9, 25, 17, 1, 9, 25, 18, 2, 9, 25, 19, 3, 9, 25, 20, 4, 9, 25, 21, 5, 9, 25, 22, 6, 9, 25, 23, 7, 9, 25, 24, 8, 9, 25, 26, 10, 9, 25, 27, 11, 9, 25, 28, 12, 9, 25, 29, 13, 9, 25, 30, 14, 9, 25, 31, 15, 9, 25, 32, 16, 10, 26, 1, 17, 10, 26, 2, 18, 10, 26, 3, 19, 10, 26, 4, 20, 10, 26, 5, 21, 10, 26, 6, 22, 10, 26, 7, 23, 10, 26, 8, 24, 10, 26, 9, 25, 10, 26, 11, 27, 10, 26, 12, 28, 10, 26, 13, 29, 10, 26, 14, 30, 10, 26, 15, 31, 10, 26, 16, 32, 10, 26, 17, 1, 10, 26, 18, 2, 10, 26, 19, 3, 10, 26, 20, 4, 10, 26, 21, 5, 10, 26, 22, 6, 10, 26, 23, 7, 10, 26, 24, 8, 10, 26, 25, 9, 10, 26, 27, 11, 10, 26, 28, 12, 10, 26, 29, 13, 10, 26, 30, 14, 10, 26, 31, 15, 10, 26, 32, 16, 11, 27, 1, 17, 11, 27, 2, 18, 11, 27, 3, 19, 11, 27, 4, 20, 11, 27, 5, 21, 11, 27, 6, 22, 11, 27, 7, 23, 11, 27, 8, 24, 11, 27, 9, 25, 11, 27, 10, 26, 11, 27, 12, 28, 11, 27, 13, 29, 11, 27, 14, 30, 11, 27, 15, 31, 11, 27, 16, 32, 11, 27, 17, 1, 11, 27, 18, 2, 11, 27, 19, 3, 11, 27, 20, 4, 11, 27, 21, 5, 11, 27, 22, 6, 11, 27, 23, 7, 11, 27, 24, 8, 11, 27, 25, 9, 11, 27, 26, 10, 11, 27, 28, 12, 11, 27, 29, 13, 11, 27, 30, 14, 11, 27, 31, 15, 11, 27, 32, 16, 12, 28, 1, 17, 12, 28, 2, 18, 12, 28, 3, 19, 12, 28, 4, 20, 12, 28, 5, 21, 12, 28, 6, 22, 12, 28, 7, 23, 12, 28, 8, 24, 12, 28, 9, 25, 12, 28, 10, 26, 12, 28, 11, 27, 12, 28, 13, 29, 12, 28, 14, 30, 12, 28, 15, 31, 12, 28, 16, 32, 12, 28, 17, 1, 12, 28, 18, 2, 12, 28, 19, 3, 12, 28, 20, 4, 12, 28, 21, 5, 12, 28, 22, 6, 12, 28, 23, 7, 12, 28, 24, 8, 12, 28, 25, 9, 12, 28, 26, 10, 12, 28, 27, 11, 12, 28, 29, 13, 12, 28, 30, 14, 12, 28, 31, 15, 12, 28, 32, 16, 13, 29, 1, 17, 13, 29, 2, 18, 13, 29, 3, 19, 13, 29, 4, 20, 13, 29, 5, 21, 13, 29, 6, 22, 13, 29, 7, 23, 13, 29, 8, 24, 13, 29, 9, 25, 13, 29, 10, 26, 13, 29, 11, 27, 13, 29, 12, 28, 13, 29, 14, 30, 13, 29, 15, 31, 13, 29, 16, 32, 13, 29, 17, 1, 13, 29, 18, 2, 13, 29, 19, 3, 13, 29, 20, 4, 13, 29, 21, 5, 13, 29, 22, 6, 13, 29, 23, 7, 13, 29, 24, 8, 13, 29, 25, 9, 13, 29, 26, 10, 13, 29, 27, 11, 13, 29, 28, 12, 13, 29, 30, 14, 13, 29, 31, 15, 13, 29, 32, 16, 14, 30, 1, 17, 14, 30, 2, 18, 14, 30, 3, 19, 14, 30, 4, 20, 14, 30, 5, 21, 14, 30, 6, 22, 14, 30, 7, 23, 14, 30, 8, 24, 14, 30, 9, 25, 14, 30, 10, 26, 14, 30, 11, 27, 14, 30, 12, 28, 14, 30, 13, 29, 14, 30, 15, 31, 14, 30, 16, 32, 14, 30, 17, 1, 14, 30, 18, 2, 14, 30, 19, 3, 14, 30, 20, 4, 14, 30, 21, 5, 14, 30, 22, 6, 14, 30, 23, 7, 14, 30, 24, 8, 14, 30, 25, 9, 14, 30, 26, 10, 14, 30, 27, 11, 14, 30, 28, 12, 14, 30, 29, 13, 14, 30, 31, 15, 14, 30, 32, 16, 15, 31, 1, 17, 15, 31, 2, 18, 15, 31, 3, 19, 15, 31, 4, 20, 15, 31, 5, 21, 15, 31, 6, 22, 15, 31, 7, 23, 15, 31, 8, 24, 15, 31, 9, 25, 15, 31, 10, 26, 15, 31, 11, 27, 15, 31, 12, 28, 15, 31, 13, 29, 15, 31, 14, 30, 15, 31, 16, 32, 15, 31, 17, 1, 15, 31, 18, 2, 15, 31, 19, 3, 15, 31, 20, 4, 15, 31, 21, 5, 15, 31, 22, 6, 15, 31, 23, 7, 15, 31, 24, 8, 15, 31, 25, 9, 15, 31, 26, 10, 15, 31, 27, 11, 15, 31, 28, 12, 15, 31, 29, 13, 15, 31, 30, 14, 15, 31, 32, 16, 16, 32, 1, 17, 16, 32, 2, 18, 16, 32, 3, 19, 16, 32, 4, 20, 16, 32, 5, 21, 16, 32, 6, 22, 16, 32, 7, 23, 16, 32, 8, 24, 16, 32, 9, 25, 16, 32, 10, 26, 16, 32, 11, 27, 16, 32, 12, 28, 16, 32, 13, 29, 16, 32, 14, 30, 16, 32, 15, 31, 16, 32, 17, 1, 16, 32, 18, 2, 16, 32, 19, 3, 16, 32, 20, 4, 16, 32, 21, 5, 16, 32, 22, 6, 16, 32, 23, 7, 16, 32, 24, 8, 16, 32, 25, 9, 16, 32, 26, 10, 16, 32, 27, 11, 16, 32, 28, 12, 16, 32, 29, 13, 16, 32, 30, 14, 16, 32, 31, 15, 17, 1, 2, 18, 17, 1, 3, 19, 17, 1, 4, 20, 17, 1, 5, 21, 17, 1, 6, 22, 17, 1, 7, 23, 17, 1, 8, 24, 17, 1, 9, 25, 17, 1, 10, 26, 17, 1, 11, 27, 17, 1, 12, 28, 17, 1, 13, 29, 17, 1, 14, 30, 17, 1, 15, 31, 17, 1, 16, 32, 17, 1, 18, 2, 17, 1, 19, 3, 17, 1, 20, 4, 17, 1, 21, 5, 17, 1, 22, 6, 17, 1, 23, 7, 17, 1, 24, 8, 17, 1, 25, 9, 17, 1, 26, 10, 17, 1, 27, 11, 17, 1, 28, 12, 17, 1, 29, 13, 17, 1, 30, 14, 17, 1, 31, 15, 17, 1, 32, 16, 18, 2, 1, 17, 18, 2, 3, 19, 18, 2, 4, 20, 18, 2, 5, 21, 18, 2, 6, 22, 18, 2, 7, 23, 18, 2, 8, 24, 18, 2, 9, 25, 18, 2, 10, 26, 18, 2, 11, 27, 18, 2, 12, 28, 18, 2, 13, 29, 18, 2, 14, 30, 18, 2, 15, 31, 18, 2, 16, 32, 18, 2, 17, 1, 18, 2, 19, 3, 18, 2, 20, 4, 18, 2, 21, 5, 18, 2, 22, 6, 18, 2, 23, 7, 18, 2, 24, 8, 18, 2, 25, 9, 18, 2, 26, 10, 18, 2, 27, 11, 18, 2, 28, 12, 18, 2, 29, 13, 18, 2, 30, 14, 18, 2, 31, 15, 18, 2, 32, 16, 19, 3, 1, 17, 19, 3, 2, 18, 19, 3, 4, 20, 19, 3, 5, 21, 19, 3, 6, 22, 19, 3, 7, 23, 19, 3, 8, 24, 19, 3, 9, 25, 19, 3, 10, 26, 19, 3, 11, 27, 19, 3, 12, 28, 19, 3, 13, 29, 19, 3, 14, 30, 19, 3, 15, 31, 19, 3, 16, 32, 19, 3, 17, 1, 19, 3, 18, 2, 19, 3, 20, 4, 19, 3, 21, 5, 19, 3, 22, 6, 19, 3, 23, 7, 19, 3, 24, 8, 19, 3, 25, 9, 19, 3, 26, 10, 19, 3, 27, 11, 19, 3, 28, 12, 19, 3, 29, 13, 19, 3, 30, 14, 19, 3, 31, 15, 19, 3, 32, 16, 20, 4, 1, 17, 20, 4, 2, 18, 20, 4, 3, 19, 20, 4, 5, 21, 20, 4, 6, 22, 20, 4, 7, 23, 20, 4, 8, 24, 20, 4, 9, 25, 20, 4, 10, 26, 20, 4, 11, 27, 20, 4, 12, 28, 20, 4, 13, 29, 20, 4, 14, 30, 20, 4, 15, 31, 20, 4, 16, 32, 20, 4, 17, 1, 20, 4, 18, 2, 20, 4, 19, 3, 20, 4, 21, 5, 20, 4, 22, 6, 20, 4, 23, 7, 20, 4, 24, 8, 20, 4, 25, 9, 20, 4, 26, 10, 20, 4, 27, 11, 20, 4, 28, 12, 20, 4, 29, 13, 20, 4, 30, 14, 20, 4, 31, 15, 20, 4, 32, 16, 21, 5, 1, 17, 21, 5, 2, 18, 21, 5, 3, 19, 21, 5, 4, 20, 21, 5, 6, 22, 21, 5, 7, 23, 21, 5, 8, 24, 21, 5, 9, 25, 21, 5, 10, 26, 21, 5, 11, 27, 21, 5, 12, 28, 21, 5, 13, 29, 21, 5, 14, 30, 21, 5, 15, 31, 21, 5, 16, 32, 21, 5, 17, 1, 21, 5, 18, 2, 21, 5, 19, 3, 21, 5, 20, 4, 21, 5, 22, 6, 21, 5, 23, 7, 21, 5, 24, 8, 21, 5, 25, 9, 21, 5, 26, 10, 21, 5, 27, 11, 21, 5, 28, 12, 21, 5, 29, 13, 21, 5, 30, 14, 21, 5, 31, 15, 21, 5, 32, 16, 22, 6, 1, 17, 22, 6, 2, 18, 22, 6, 3, 19, 22, 6, 4, 20, 22, 6, 5, 21, 22, 6, 7, 23, 22, 6, 8, 24, 22, 6, 9, 25, 22, 6, 10, 26, 22, 6, 11, 27, 22, 6, 12, 28, 22, 6, 13, 29, 22, 6, 14, 30, 22, 6, 15, 31, 22, 6, 16, 32, 22, 6, 17, 1, 22, 6, 18, 2, 22, 6, 19, 3, 22, 6, 20, 4, 22, 6, 21, 5, 22, 6, 23, 7, 22, 6, 24, 8, 22, 6, 25, 9, 22, 6, 26, 10, 22, 6, 27, 11, 22, 6, 28, 12, 22, 6, 29, 13, 22, 6, 30, 14, 22, 6, 31, 15, 22, 6, 32, 16, 23, 7, 1, 17, 23, 7, 2, 18, 23, 7, 3, 19, 23, 7, 4, 20, 23, 7, 5, 21, 23, 7, 6, 22, 23, 7, 8, 24, 23, 7, 9, 25, 23, 7, 10, 26, 23, 7, 11, 27, 23, 7, 12, 28, 23, 7, 13, 29, 23, 7, 14, 30, 23, 7, 15, 31, 23, 7, 16, 32, 23, 7, 17, 1, 23, 7, 18, 2, 23, 7, 19, 3, 23, 7, 20, 4, 23, 7, 21, 5, 23, 7, 22, 6, 23, 7, 24, 8, 23, 7, 25, 9, 23, 7, 26, 10, 23, 7, 27, 11, 23, 7, 28, 12, 23, 7, 29, 13, 23, 7, 30, 14, 23, 7, 31, 15, 23, 7, 32, 16, 24, 8, 1, 17, 24, 8, 2, 18, 24, 8, 3, 19, 24, 8, 4, 20, 24, 8, 5, 21, 24, 8, 6, 22, 24, 8, 7, 23, 24, 8, 9, 25, 24, 8, 10, 26, 24, 8, 11, 27, 24, 8, 12, 28, 24, 8, 13, 29, 24, 8, 14, 30, 24, 8, 15, 31, 24, 8, 16, 32, 24, 8, 17, 1, 24, 8, 18, 2, 24, 8, 19, 3, 24, 8, 20, 4, 24, 8, 21, 5, 24, 8, 22, 6, 24, 8, 23, 7, 24, 8, 25, 9, 24, 8, 26, 10, 24, 8, 27, 11, 24, 8, 28, 12, 24, 8, 29, 13, 24, 8, 30, 14, 24, 8, 31, 15, 24, 8, 32, 16, 25, 9, 1, 17, 25, 9, 2, 18, 25, 9, 3, 19, 25, 9, 4, 20, 25, 9, 5, 21, 25, 9, 6, 22, 25, 9, 7, 23, 25, 9, 8, 24, 25, 9, 10, 26, 25, 9, 11, 27, 25, 9, 12, 28, 25, 9, 13, 29, 25, 9, 14, 30, 25, 9, 15, 31, 25, 9, 16, 32, 25, 9, 17, 1, 25, 9, 18, 2, 25, 9, 19, 3, 25, 9, 20, 4, 25, 9, 21, 5, 25, 9, 22, 6, 25, 9, 23, 7, 25, 9, 24, 8, 25, 9, 26, 10, 25, 9, 27, 11, 25, 9, 28, 12, 25, 9, 29, 13, 25, 9, 30, 14, 25, 9, 31, 15, 25, 9, 32, 16, 26, 10, 1, 17, 26, 10, 2, 18, 26, 10, 3, 19, 26, 10, 4, 20, 26, 10, 5, 21, 26, 10, 6, 22, 26, 10, 7, 23, 26, 10, 8, 24, 26, 10, 9, 25, 26, 10, 11, 27, 26, 10, 12, 28, 26, 10, 13, 29, 26, 10, 14, 30, 26, 10, 15, 31, 26, 10, 16, 32, 26, 10, 17, 1, 26, 10, 18, 2, 26, 10, 19, 3, 26, 10, 20, 4, 26, 10, 21, 5, 26, 10, 22, 6, 26, 10, 23, 7, 26, 10, 24, 8, 26, 10, 25, 9, 26, 10, 27, 11, 26, 10, 28, 12, 26, 10, 29, 13, 26, 10, 30, 14, 26, 10, 31, 15, 26, 10, 32, 16, 27, 11, 1, 17, 27, 11, 2, 18, 27, 11, 3, 19, 27, 11, 4, 20, 27, 11, 5, 21, 27, 11, 6, 22, 27, 11, 7, 23, 27, 11, 8, 24, 27, 11, 9, 25, 27, 11, 10, 26, 27, 11, 12, 28, 27, 11, 13, 29, 27, 11, 14, 30, 27, 11, 15, 31, 27, 11, 16, 32, 27, 11, 17, 1, 27, 11, 18, 2, 27, 11, 19, 3, 27, 11, 20, 4, 27, 11, 21, 5, 27, 11, 22, 6, 27, 11, 23, 7, 27, 11, 24, 8, 27, 11, 25, 9, 27, 11, 26, 10, 27, 11, 28, 12, 27, 11, 29, 13, 27, 11, 30, 14, 27, 11, 31, 15, 27, 11, 32, 16, 28, 12, 1, 17, 28, 12, 2, 18, 28, 12, 3, 19, 28, 12, 4, 20, 28, 12, 5, 21, 28, 12, 6, 22, 28, 12, 7, 23, 28, 12, 8, 24, 28, 12, 9, 25, 28, 12, 10, 26, 28, 12, 11, 27, 28, 12, 13, 29, 28, 12, 14, 30, 28, 12, 15, 31, 28, 12, 16, 32, 28, 12, 17, 1, 28, 12, 18, 2, 28, 12, 19, 3, 28, 12, 20, 4, 28, 12, 21, 5, 28, 12, 22, 6, 28, 12, 23, 7, 28, 12, 24, 8, 28, 12, 25, 9, 28, 12, 26, 10, 28, 12, 27, 11, 28, 12, 29, 13, 28, 12, 30, 14, 28, 12, 31, 15, 28, 12, 32, 16, 29, 13, 1, 17, 29, 13, 2, 18, 29, 13, 3, 19, 29, 13, 4, 20, 29, 13, 5, 21, 29, 13, 6, 22, 29, 13, 7, 23, 29, 13, 8, 24, 29, 13, 9, 25, 29, 13, 10, 26, 29, 13, 11, 27, 29, 13, 12, 28, 29, 13, 14, 30, 29, 13, 15, 31, 29, 13, 16, 32, 29, 13, 17, 1, 29, 13, 18, 2, 29, 13, 19, 3, 29, 13, 20, 4, 29, 13, 21, 5, 29, 13, 22, 6, 29, 13, 23, 7, 29, 13, 24, 8, 29, 13, 25, 9, 29, 13, 26, 10, 29, 13, 27, 11, 29, 13, 28, 12, 29, 13, 30, 14, 29, 13, 31, 15, 29, 13, 32, 16, 30, 14, 1, 17, 30, 14, 2, 18, 30, 14, 3, 19, 30, 14, 4, 20, 30, 14, 5, 21, 30, 14, 6, 22, 30, 14, 7, 23, 30, 14, 8, 24, 30, 14, 9, 25, 30, 14, 10, 26, 30, 14, 11, 27, 30, 14, 12, 28, 30, 14, 13, 29, 30, 14, 15, 31, 30, 14, 16, 32, 30, 14, 17, 1, 30, 14, 18, 2, 30, 14, 19, 3, 30, 14, 20, 4, 30, 14, 21, 5, 30, 14, 22, 6, 30, 14, 23, 7, 30, 14, 24, 8, 30, 14, 25, 9, 30, 14, 26, 10, 30, 14, 27, 11, 30, 14, 28, 12, 30, 14, 29, 13, 30, 14, 31, 15, 30, 14, 32, 16, 31, 15, 1, 17, 31, 15, 2, 18, 31, 15, 3, 19, 31, 15, 4, 20, 31, 15, 5, 21, 31, 15, 6, 22, 31, 15, 7, 23, 31, 15, 8, 24, 31, 15, 9, 25, 31, 15, 10, 26, 31, 15, 11, 27, 31, 15, 12, 28, 31, 15, 13, 29, 31, 15, 14, 30, 31, 15, 16, 32, 31, 15, 17, 1, 31, 15, 18, 2, 31, 15, 19, 3, 31, 15, 20, 4, 31, 15, 21, 5, 31, 15, 22, 6, 31, 15, 23, 7, 31, 15, 24, 8, 31, 15, 25, 9, 31, 15, 26, 10, 31, 15, 27, 11, 31, 15, 28, 12, 31, 15, 29, 13, 31, 15, 30, 14, 31, 15, 32, 16, 32, 16, 1, 17, 32, 16, 2, 18, 32, 16, 3, 19, 32, 16, 4, 20, 32, 16, 5, 21, 32, 16, 6, 22, 32, 16, 7, 23, 32, 16, 8, 24, 32, 16, 9, 25, 32, 16, 10, 26, 32, 16, 11, 27, 32, 16, 12, 28, 32, 16, 13, 29, 32, 16, 14, 30, 32, 16, 15, 31, 32, 16, 17, 1, 32, 16, 18, 2, 32, 16, 19, 3, 32, 16, 20, 4, 32, 16, 21, 5, 32, 16, 22, 6, 32, 16, 23, 7, 32, 16, 24, 8, 32, 16, 25, 9, 32, 16, 26, 10, 32, 16, 27, 11, 32, 16, 28, 12, 32, 16, 29, 13, 32, 16, 30, 14, 32, 16, 31, 15
};

#define num_op_ad 3584
int op_ad_combos[num_op_ad] = {
  1, 17, 2, 3, 1, 17, 3, 4, 1, 17, 4, 5, 1, 17, 5, 6, 1, 17, 6, 7, 1, 17, 7, 8, 1, 17, 8, 9, 1, 17, 9, 10, 1, 17, 10, 11, 1, 17, 11, 12, 1, 17, 12, 13, 1, 17, 13, 14, 1, 17, 14, 15, 1, 17, 15, 16, 1, 17, 18, 19, 1, 17, 19, 20, 1, 17, 20, 21, 1, 17, 21, 22, 1, 17, 22, 23, 1, 17, 23, 24, 1, 17, 24, 25, 1, 17, 25, 26, 1, 17, 26, 27, 1, 17, 27, 28, 1, 17, 28, 29, 1, 17, 29, 30, 1, 17, 30, 31, 1, 17, 31, 32, 2, 18, 3, 4, 2, 18, 4, 5, 2, 18, 5, 6, 2, 18, 6, 7, 2, 18, 7, 8, 2, 18, 8, 9, 2, 18, 9, 10, 2, 18, 10, 11, 2, 18, 11, 12, 2, 18, 12, 13, 2, 18, 13, 14, 2, 18, 14, 15, 2, 18, 15, 16, 2, 18, 16, 17, 2, 18, 19, 20, 2, 18, 20, 21, 2, 18, 21, 22, 2, 18, 22, 23, 2, 18, 23, 24, 2, 18, 24, 25, 2, 18, 25, 26, 2, 18, 26, 27, 2, 18, 27, 28, 2, 18, 28, 29, 2, 18, 29, 30, 2, 18, 30, 31, 2, 18, 31, 32, 2, 18, 32, 1, 3, 19, 1, 2, 3, 19, 4, 5, 3, 19, 5, 6, 3, 19, 6, 7, 3, 19, 7, 8, 3, 19, 8, 9, 3, 19, 9, 10, 3, 19, 10, 11, 3, 19, 11, 12, 3, 19, 12, 13, 3, 19, 13, 14, 3, 19, 14, 15, 3, 19, 15, 16, 3, 19, 16, 17, 3, 19, 17, 18, 3, 19, 20, 21, 3, 19, 21, 22, 3, 19, 22, 23, 3, 19, 23, 24, 3, 19, 24, 25, 3, 19, 25, 26, 3, 19, 26, 27, 3, 19, 27, 28, 3, 19, 28, 29, 3, 19, 29, 30, 3, 19, 30, 31, 3, 19, 31, 32, 3, 19, 32, 1, 4, 20, 1, 2, 4, 20, 2, 3, 4, 20, 5, 6, 4, 20, 6, 7, 4, 20, 7, 8, 4, 20, 8, 9, 4, 20, 9, 10, 4, 20, 10, 11, 4, 20, 11, 12, 4, 20, 12, 13, 4, 20, 13, 14, 4, 20, 14, 15, 4, 20, 15, 16, 4, 20, 16, 17, 4, 20, 17, 18, 4, 20, 18, 19, 4, 20, 21, 22, 4, 20, 22, 23, 4, 20, 23, 24, 4, 20, 24, 25, 4, 20, 25, 26, 4, 20, 26, 27, 4, 20, 27, 28, 4, 20, 28, 29, 4, 20, 29, 30, 4, 20, 30, 31, 4, 20, 31, 32, 4, 20, 32, 1, 5, 21, 1, 2, 5, 21, 2, 3, 5, 21, 3, 4, 5, 21, 6, 7, 5, 21, 7, 8, 5, 21, 8, 9, 5, 21, 9, 10, 5, 21, 10, 11, 5, 21, 11, 12, 5, 21, 12, 13, 5, 21, 13, 14, 5, 21, 14, 15, 5, 21, 15, 16, 5, 21, 16, 17, 5, 21, 17, 18, 5, 21, 18, 19, 5, 21, 19, 20, 5, 21, 22, 23, 5, 21, 23, 24, 5, 21, 24, 25, 5, 21, 25, 26, 5, 21, 26, 27, 5, 21, 27, 28, 5, 21, 28, 29, 5, 21, 29, 30, 5, 21, 30, 31, 5, 21, 31, 32, 5, 21, 32, 1, 6, 22, 1, 2, 6, 22, 2, 3, 6, 22, 3, 4, 6, 22, 4, 5, 6, 22, 7, 8, 6, 22, 8, 9, 6, 22, 9, 10, 6, 22, 10, 11, 6, 22, 11, 12, 6, 22, 12, 13, 6, 22, 13, 14, 6, 22, 14, 15, 6, 22, 15, 16, 6, 22, 16, 17, 6, 22, 17, 18, 6, 22, 18, 19, 6, 22, 19, 20, 6, 22, 20, 21, 6, 22, 23, 24, 6, 22, 24, 25, 6, 22, 25, 26, 6, 22, 26, 27, 6, 22, 27, 28, 6, 22, 28, 29, 6, 22, 29, 30, 6, 22, 30, 31, 6, 22, 31, 32, 6, 22, 32, 1, 7, 23, 1, 2, 7, 23, 2, 3, 7, 23, 3, 4, 7, 23, 4, 5, 7, 23, 5, 6, 7, 23, 8, 9, 7, 23, 9, 10, 7, 23, 10, 11, 7, 23, 11, 12, 7, 23, 12, 13, 7, 23, 13, 14, 7, 23, 14, 15, 7, 23, 15, 16, 7, 23, 16, 17, 7, 23, 17, 18, 7, 23, 18, 19, 7, 23, 19, 20, 7, 23, 20, 21, 7, 23, 21, 22, 7, 23, 24, 25, 7, 23, 25, 26, 7, 23, 26, 27, 7, 23, 27, 28, 7, 23, 28, 29, 7, 23, 29, 30, 7, 23, 30, 31, 7, 23, 31, 32, 7, 23, 32, 1, 8, 24, 1, 2, 8, 24, 2, 3, 8, 24, 3, 4, 8, 24, 4, 5, 8, 24, 5, 6, 8, 24, 6, 7, 8, 24, 9, 10, 8, 24, 10, 11, 8, 24, 11, 12, 8, 24, 12, 13, 8, 24, 13, 14, 8, 24, 14, 15, 8, 24, 15, 16, 8, 24, 16, 17, 8, 24, 17, 18, 8, 24, 18, 19, 8, 24, 19, 20, 8, 24, 20, 21, 8, 24, 21, 22, 8, 24, 22, 23, 8, 24, 25, 26, 8, 24, 26, 27, 8, 24, 27, 28, 8, 24, 28, 29, 8, 24, 29, 30, 8, 24, 30, 31, 8, 24, 31, 32, 8, 24, 32, 1, 9, 25, 1, 2, 9, 25, 2, 3, 9, 25, 3, 4, 9, 25, 4, 5, 9, 25, 5, 6, 9, 25, 6, 7, 9, 25, 7, 8, 9, 25, 10, 11, 9, 25, 11, 12, 9, 25, 12, 13, 9, 25, 13, 14, 9, 25, 14, 15, 9, 25, 15, 16, 9, 25, 16, 17, 9, 25, 17, 18, 9, 25, 18, 19, 9, 25, 19, 20, 9, 25, 20, 21, 9, 25, 21, 22, 9, 25, 22, 23, 9, 25, 23, 24, 9, 25, 26, 27, 9, 25, 27, 28, 9, 25, 28, 29, 9, 25, 29, 30, 9, 25, 30, 31, 9, 25, 31, 32, 9, 25, 32, 1, 10, 26, 1, 2, 10, 26, 2, 3, 10, 26, 3, 4, 10, 26, 4, 5, 10, 26, 5, 6, 10, 26, 6, 7, 10, 26, 7, 8, 10, 26, 8, 9, 10, 26, 11, 12, 10, 26, 12, 13, 10, 26, 13, 14, 10, 26, 14, 15, 10, 26, 15, 16, 10, 26, 16, 17, 10, 26, 17, 18, 10, 26, 18, 19, 10, 26, 19, 20, 10, 26, 20, 21, 10, 26, 21, 22, 10, 26, 22, 23, 10, 26, 23, 24, 10, 26, 24, 25, 10, 26, 27, 28, 10, 26, 28, 29, 10, 26, 29, 30, 10, 26, 30, 31, 10, 26, 31, 32, 10, 26, 32, 1, 11, 27, 1, 2, 11, 27, 2, 3, 11, 27, 3, 4, 11, 27, 4, 5, 11, 27, 5, 6, 11, 27, 6, 7, 11, 27, 7, 8, 11, 27, 8, 9, 11, 27, 9, 10, 11, 27, 12, 13, 11, 27, 13, 14, 11, 27, 14, 15, 11, 27, 15, 16, 11, 27, 16, 17, 11, 27, 17, 18, 11, 27, 18, 19, 11, 27, 19, 20, 11, 27, 20, 21, 11, 27, 21, 22, 11, 27, 22, 23, 11, 27, 23, 24, 11, 27, 24, 25, 11, 27, 25, 26, 11, 27, 28, 29, 11, 27, 29, 30, 11, 27, 30, 31, 11, 27, 31, 32, 11, 27, 32, 1, 12, 28, 1, 2, 12, 28, 2, 3, 12, 28, 3, 4, 12, 28, 4, 5, 12, 28, 5, 6, 12, 28, 6, 7, 12, 28, 7, 8, 12, 28, 8, 9, 12, 28, 9, 10, 12, 28, 10, 11, 12, 28, 13, 14, 12, 28, 14, 15, 12, 28, 15, 16, 12, 28, 16, 17, 12, 28, 17, 18, 12, 28, 18, 19, 12, 28, 19, 20, 12, 28, 20, 21, 12, 28, 21, 22, 12, 28, 22, 23, 12, 28, 23, 24, 12, 28, 24, 25, 12, 28, 25, 26, 12, 28, 26, 27, 12, 28, 29, 30, 12, 28, 30, 31, 12, 28, 31, 32, 12, 28, 32, 1, 13, 29, 1, 2, 13, 29, 2, 3, 13, 29, 3, 4, 13, 29, 4, 5, 13, 29, 5, 6, 13, 29, 6, 7, 13, 29, 7, 8, 13, 29, 8, 9, 13, 29, 9, 10, 13, 29, 10, 11, 13, 29, 11, 12, 13, 29, 14, 15, 13, 29, 15, 16, 13, 29, 16, 17, 13, 29, 17, 18, 13, 29, 18, 19, 13, 29, 19, 20, 13, 29, 20, 21, 13, 29, 21, 22, 13, 29, 22, 23, 13, 29, 23, 24, 13, 29, 24, 25, 13, 29, 25, 26, 13, 29, 26, 27, 13, 29, 27, 28, 13, 29, 30, 31, 13, 29, 31, 32, 13, 29, 32, 1, 14, 30, 1, 2, 14, 30, 2, 3, 14, 30, 3, 4, 14, 30, 4, 5, 14, 30, 5, 6, 14, 30, 6, 7, 14, 30, 7, 8, 14, 30, 8, 9, 14, 30, 9, 10, 14, 30, 10, 11, 14, 30, 11, 12, 14, 30, 12, 13, 14, 30, 15, 16, 14, 30, 16, 17, 14, 30, 17, 18, 14, 30, 18, 19, 14, 30, 19, 20, 14, 30, 20, 21, 14, 30, 21, 22, 14, 30, 22, 23, 14, 30, 23, 24, 14, 30, 24, 25, 14, 30, 25, 26, 14, 30, 26, 27, 14, 30, 27, 28, 14, 30, 28, 29, 14, 30, 31, 32, 14, 30, 32, 1, 15, 31, 1, 2, 15, 31, 2, 3, 15, 31, 3, 4, 15, 31, 4, 5, 15, 31, 5, 6, 15, 31, 6, 7, 15, 31, 7, 8, 15, 31, 8, 9, 15, 31, 9, 10, 15, 31, 10, 11, 15, 31, 11, 12, 15, 31, 12, 13, 15, 31, 13, 14, 15, 31, 16, 17, 15, 31, 17, 18, 15, 31, 18, 19, 15, 31, 19, 20, 15, 31, 20, 21, 15, 31, 21, 22, 15, 31, 22, 23, 15, 31, 23, 24, 15, 31, 24, 25, 15, 31, 25, 26, 15, 31, 26, 27, 15, 31, 27, 28, 15, 31, 28, 29, 15, 31, 29, 30, 15, 31, 32, 1, 16, 32, 1, 2, 16, 32, 2, 3, 16, 32, 3, 4, 16, 32, 4, 5, 16, 32, 5, 6, 16, 32, 6, 7, 16, 32, 7, 8, 16, 32, 8, 9, 16, 32, 9, 10, 16, 32, 10, 11, 16, 32, 11, 12, 16, 32, 12, 13, 16, 32, 13, 14, 16, 32, 14, 15, 16, 32, 17, 18, 16, 32, 18, 19, 16, 32, 19, 20, 16, 32, 20, 21, 16, 32, 21, 22, 16, 32, 22, 23, 16, 32, 23, 24, 16, 32, 24, 25, 16, 32, 25, 26, 16, 32, 26, 27, 16, 32, 27, 28, 16, 32, 28, 29, 16, 32, 29, 30, 16, 32, 30, 31, 17, 1, 2, 3, 17, 1, 3, 4, 17, 1, 4, 5, 17, 1, 5, 6, 17, 1, 6, 7, 17, 1, 7, 8, 17, 1, 8, 9, 17, 1, 9, 10, 17, 1, 10, 11, 17, 1, 11, 12, 17, 1, 12, 13, 17, 1, 13, 14, 17, 1, 14, 15, 17, 1, 15, 16, 17, 1, 18, 19, 17, 1, 19, 20, 17, 1, 20, 21, 17, 1, 21, 22, 17, 1, 22, 23, 17, 1, 23, 24, 17, 1, 24, 25, 17, 1, 25, 26, 17, 1, 26, 27, 17, 1, 27, 28, 17, 1, 28, 29, 17, 1, 29, 30, 17, 1, 30, 31, 17, 1, 31, 32, 18, 2, 3, 4, 18, 2, 4, 5, 18, 2, 5, 6, 18, 2, 6, 7, 18, 2, 7, 8, 18, 2, 8, 9, 18, 2, 9, 10, 18, 2, 10, 11, 18, 2, 11, 12, 18, 2, 12, 13, 18, 2, 13, 14, 18, 2, 14, 15, 18, 2, 15, 16, 18, 2, 16, 17, 18, 2, 19, 20, 18, 2, 20, 21, 18, 2, 21, 22, 18, 2, 22, 23, 18, 2, 23, 24, 18, 2, 24, 25, 18, 2, 25, 26, 18, 2, 26, 27, 18, 2, 27, 28, 18, 2, 28, 29, 18, 2, 29, 30, 18, 2, 30, 31, 18, 2, 31, 32, 18, 2, 32, 1, 19, 3, 1, 2, 19, 3, 4, 5, 19, 3, 5, 6, 19, 3, 6, 7, 19, 3, 7, 8, 19, 3, 8, 9, 19, 3, 9, 10, 19, 3, 10, 11, 19, 3, 11, 12, 19, 3, 12, 13, 19, 3, 13, 14, 19, 3, 14, 15, 19, 3, 15, 16, 19, 3, 16, 17, 19, 3, 17, 18, 19, 3, 20, 21, 19, 3, 21, 22, 19, 3, 22, 23, 19, 3, 23, 24, 19, 3, 24, 25, 19, 3, 25, 26, 19, 3, 26, 27, 19, 3, 27, 28, 19, 3, 28, 29, 19, 3, 29, 30, 19, 3, 30, 31, 19, 3, 31, 32, 19, 3, 32, 1, 20, 4, 1, 2, 20, 4, 2, 3, 20, 4, 5, 6, 20, 4, 6, 7, 20, 4, 7, 8, 20, 4, 8, 9, 20, 4, 9, 10, 20, 4, 10, 11, 20, 4, 11, 12, 20, 4, 12, 13, 20, 4, 13, 14, 20, 4, 14, 15, 20, 4, 15, 16, 20, 4, 16, 17, 20, 4, 17, 18, 20, 4, 18, 19, 20, 4, 21, 22, 20, 4, 22, 23, 20, 4, 23, 24, 20, 4, 24, 25, 20, 4, 25, 26, 20, 4, 26, 27, 20, 4, 27, 28, 20, 4, 28, 29, 20, 4, 29, 30, 20, 4, 30, 31, 20, 4, 31, 32, 20, 4, 32, 1, 21, 5, 1, 2, 21, 5, 2, 3, 21, 5, 3, 4, 21, 5, 6, 7, 21, 5, 7, 8, 21, 5, 8, 9, 21, 5, 9, 10, 21, 5, 10, 11, 21, 5, 11, 12, 21, 5, 12, 13, 21, 5, 13, 14, 21, 5, 14, 15, 21, 5, 15, 16, 21, 5, 16, 17, 21, 5, 17, 18, 21, 5, 18, 19, 21, 5, 19, 20, 21, 5, 22, 23, 21, 5, 23, 24, 21, 5, 24, 25, 21, 5, 25, 26, 21, 5, 26, 27, 21, 5, 27, 28, 21, 5, 28, 29, 21, 5, 29, 30, 21, 5, 30, 31, 21, 5, 31, 32, 21, 5, 32, 1, 22, 6, 1, 2, 22, 6, 2, 3, 22, 6, 3, 4, 22, 6, 4, 5, 22, 6, 7, 8, 22, 6, 8, 9, 22, 6, 9, 10, 22, 6, 10, 11, 22, 6, 11, 12, 22, 6, 12, 13, 22, 6, 13, 14, 22, 6, 14, 15, 22, 6, 15, 16, 22, 6, 16, 17, 22, 6, 17, 18, 22, 6, 18, 19, 22, 6, 19, 20, 22, 6, 20, 21, 22, 6, 23, 24, 22, 6, 24, 25, 22, 6, 25, 26, 22, 6, 26, 27, 22, 6, 27, 28, 22, 6, 28, 29, 22, 6, 29, 30, 22, 6, 30, 31, 22, 6, 31, 32, 22, 6, 32, 1, 23, 7, 1, 2, 23, 7, 2, 3, 23, 7, 3, 4, 23, 7, 4, 5, 23, 7, 5, 6, 23, 7, 8, 9, 23, 7, 9, 10, 23, 7, 10, 11, 23, 7, 11, 12, 23, 7, 12, 13, 23, 7, 13, 14, 23, 7, 14, 15, 23, 7, 15, 16, 23, 7, 16, 17, 23, 7, 17, 18, 23, 7, 18, 19, 23, 7, 19, 20, 23, 7, 20, 21, 23, 7, 21, 22, 23, 7, 24, 25, 23, 7, 25, 26, 23, 7, 26, 27, 23, 7, 27, 28, 23, 7, 28, 29, 23, 7, 29, 30, 23, 7, 30, 31, 23, 7, 31, 32, 23, 7, 32, 1, 24, 8, 1, 2, 24, 8, 2, 3, 24, 8, 3, 4, 24, 8, 4, 5, 24, 8, 5, 6, 24, 8, 6, 7, 24, 8, 9, 10, 24, 8, 10, 11, 24, 8, 11, 12, 24, 8, 12, 13, 24, 8, 13, 14, 24, 8, 14, 15, 24, 8, 15, 16, 24, 8, 16, 17, 24, 8, 17, 18, 24, 8, 18, 19, 24, 8, 19, 20, 24, 8, 20, 21, 24, 8, 21, 22, 24, 8, 22, 23, 24, 8, 25, 26, 24, 8, 26, 27, 24, 8, 27, 28, 24, 8, 28, 29, 24, 8, 29, 30, 24, 8, 30, 31, 24, 8, 31, 32, 24, 8, 32, 1, 25, 9, 1, 2, 25, 9, 2, 3, 25, 9, 3, 4, 25, 9, 4, 5, 25, 9, 5, 6, 25, 9, 6, 7, 25, 9, 7, 8, 25, 9, 10, 11, 25, 9, 11, 12, 25, 9, 12, 13, 25, 9, 13, 14, 25, 9, 14, 15, 25, 9, 15, 16, 25, 9, 16, 17, 25, 9, 17, 18, 25, 9, 18, 19, 25, 9, 19, 20, 25, 9, 20, 21, 25, 9, 21, 22, 25, 9, 22, 23, 25, 9, 23, 24, 25, 9, 26, 27, 25, 9, 27, 28, 25, 9, 28, 29, 25, 9, 29, 30, 25, 9, 30, 31, 25, 9, 31, 32, 25, 9, 32, 1, 26, 10, 1, 2, 26, 10, 2, 3, 26, 10, 3, 4, 26, 10, 4, 5, 26, 10, 5, 6, 26, 10, 6, 7, 26, 10, 7, 8, 26, 10, 8, 9, 26, 10, 11, 12, 26, 10, 12, 13, 26, 10, 13, 14, 26, 10, 14, 15, 26, 10, 15, 16, 26, 10, 16, 17, 26, 10, 17, 18, 26, 10, 18, 19, 26, 10, 19, 20, 26, 10, 20, 21, 26, 10, 21, 22, 26, 10, 22, 23, 26, 10, 23, 24, 26, 10, 24, 25, 26, 10, 27, 28, 26, 10, 28, 29, 26, 10, 29, 30, 26, 10, 30, 31, 26, 10, 31, 32, 26, 10, 32, 1, 27, 11, 1, 2, 27, 11, 2, 3, 27, 11, 3, 4, 27, 11, 4, 5, 27, 11, 5, 6, 27, 11, 6, 7, 27, 11, 7, 8, 27, 11, 8, 9, 27, 11, 9, 10, 27, 11, 12, 13, 27, 11, 13, 14, 27, 11, 14, 15, 27, 11, 15, 16, 27, 11, 16, 17, 27, 11, 17, 18, 27, 11, 18, 19, 27, 11, 19, 20, 27, 11, 20, 21, 27, 11, 21, 22, 27, 11, 22, 23, 27, 11, 23, 24, 27, 11, 24, 25, 27, 11, 25, 26, 27, 11, 28, 29, 27, 11, 29, 30, 27, 11, 30, 31, 27, 11, 31, 32, 27, 11, 32, 1, 28, 12, 1, 2, 28, 12, 2, 3, 28, 12, 3, 4, 28, 12, 4, 5, 28, 12, 5, 6, 28, 12, 6, 7, 28, 12, 7, 8, 28, 12, 8, 9, 28, 12, 9, 10, 28, 12, 10, 11, 28, 12, 13, 14, 28, 12, 14, 15, 28, 12, 15, 16, 28, 12, 16, 17, 28, 12, 17, 18, 28, 12, 18, 19, 28, 12, 19, 20, 28, 12, 20, 21, 28, 12, 21, 22, 28, 12, 22, 23, 28, 12, 23, 24, 28, 12, 24, 25, 28, 12, 25, 26, 28, 12, 26, 27, 28, 12, 29, 30, 28, 12, 30, 31, 28, 12, 31, 32, 28, 12, 32, 1, 29, 13, 1, 2, 29, 13, 2, 3, 29, 13, 3, 4, 29, 13, 4, 5, 29, 13, 5, 6, 29, 13, 6, 7, 29, 13, 7, 8, 29, 13, 8, 9, 29, 13, 9, 10, 29, 13, 10, 11, 29, 13, 11, 12, 29, 13, 14, 15, 29, 13, 15, 16, 29, 13, 16, 17, 29, 13, 17, 18, 29, 13, 18, 19, 29, 13, 19, 20, 29, 13, 20, 21, 29, 13, 21, 22, 29, 13, 22, 23, 29, 13, 23, 24, 29, 13, 24, 25, 29, 13, 25, 26, 29, 13, 26, 27, 29, 13, 27, 28, 29, 13, 30, 31, 29, 13, 31, 32, 29, 13, 32, 1, 30, 14, 1, 2, 30, 14, 2, 3, 30, 14, 3, 4, 30, 14, 4, 5, 30, 14, 5, 6, 30, 14, 6, 7, 30, 14, 7, 8, 30, 14, 8, 9, 30, 14, 9, 10, 30, 14, 10, 11, 30, 14, 11, 12, 30, 14, 12, 13, 30, 14, 15, 16, 30, 14, 16, 17, 30, 14, 17, 18, 30, 14, 18, 19, 30, 14, 19, 20, 30, 14, 20, 21, 30, 14, 21, 22, 30, 14, 22, 23, 30, 14, 23, 24, 30, 14, 24, 25, 30, 14, 25, 26, 30, 14, 26, 27, 30, 14, 27, 28, 30, 14, 28, 29, 30, 14, 31, 32, 30, 14, 32, 1, 31, 15, 1, 2, 31, 15, 2, 3, 31, 15, 3, 4, 31, 15, 4, 5, 31, 15, 5, 6, 31, 15, 6, 7, 31, 15, 7, 8, 31, 15, 8, 9, 31, 15, 9, 10, 31, 15, 10, 11, 31, 15, 11, 12, 31, 15, 12, 13, 31, 15, 13, 14, 31, 15, 16, 17, 31, 15, 17, 18, 31, 15, 18, 19, 31, 15, 19, 20, 31, 15, 20, 21, 31, 15, 21, 22, 31, 15, 22, 23, 31, 15, 23, 24, 31, 15, 24, 25, 31, 15, 25, 26, 31, 15, 26, 27, 31, 15, 27, 28, 31, 15, 28, 29, 31, 15, 29, 30, 31, 15, 32, 1, 32, 16, 1, 2, 32, 16, 2, 3, 32, 16, 3, 4, 32, 16, 4, 5, 32, 16, 5, 6, 32, 16, 6, 7, 32, 16, 7, 8, 32, 16, 8, 9, 32, 16, 9, 10, 32, 16, 10, 11, 32, 16, 11, 12, 32, 16, 12, 13, 32, 16, 13, 14, 32, 16, 14, 15, 32, 16, 17, 18, 32, 16, 18, 19, 32, 16, 19, 20, 32, 16, 20, 21, 32, 16, 21, 22, 32, 16, 22, 23, 32, 16, 23, 24, 32, 16, 24, 25, 32, 16, 25, 26, 32, 16, 26, 27, 32, 16, 27, 28, 32, 16, 28, 29, 32, 16, 29, 30, 32, 16, 30, 31
};

#define num_ad_ad 3712
int ad_ad_combos[num_ad_ad] = {
  1, 2, 3, 4, 1, 2, 4, 5, 1, 2, 5, 6, 1, 2, 6, 7, 1, 2, 7, 8, 1, 2, 8, 9, 1, 2, 9, 10, 1, 2, 10, 11, 1, 2, 11, 12, 1, 2, 12, 13, 1, 2, 13, 14, 1, 2, 14, 15, 1, 2, 15, 16, 1, 2, 16, 17, 1, 2, 17, 18, 1, 2, 18, 19, 1, 2, 19, 20, 1, 2, 20, 21, 1, 2, 21, 22, 1, 2, 22, 23, 1, 2, 23, 24, 1, 2, 24, 25, 1, 2, 25, 26, 1, 2, 26, 27, 1, 2, 27, 28, 1, 2, 28, 29, 1, 2, 29, 30, 1, 2, 30, 31, 1, 2, 31, 32, 2, 3, 4, 5, 2, 3, 5, 6, 2, 3, 6, 7, 2, 3, 7, 8, 2, 3, 8, 9, 2, 3, 9, 10, 2, 3, 10, 11, 2, 3, 11, 12, 2, 3, 12, 13, 2, 3, 13, 14, 2, 3, 14, 15, 2, 3, 15, 16, 2, 3, 16, 17, 2, 3, 17, 18, 2, 3, 18, 19, 2, 3, 19, 20, 2, 3, 20, 21, 2, 3, 21, 22, 2, 3, 22, 23, 2, 3, 23, 24, 2, 3, 24, 25, 2, 3, 25, 26, 2, 3, 26, 27, 2, 3, 27, 28, 2, 3, 28, 29, 2, 3, 29, 30, 2, 3, 30, 31, 2, 3, 31, 32, 2, 3, 32, 1, 3, 4, 1, 2, 3, 4, 5, 6, 3, 4, 6, 7, 3, 4, 7, 8, 3, 4, 8, 9, 3, 4, 9, 10, 3, 4, 10, 11, 3, 4, 11, 12, 3, 4, 12, 13, 3, 4, 13, 14, 3, 4, 14, 15, 3, 4, 15, 16, 3, 4, 16, 17, 3, 4, 17, 18, 3, 4, 18, 19, 3, 4, 19, 20, 3, 4, 20, 21, 3, 4, 21, 22, 3, 4, 22, 23, 3, 4, 23, 24, 3, 4, 24, 25, 3, 4, 25, 26, 3, 4, 26, 27, 3, 4, 27, 28, 3, 4, 28, 29, 3, 4, 29, 30, 3, 4, 30, 31, 3, 4, 31, 32, 3, 4, 32, 1, 4, 5, 1, 2, 4, 5, 2, 3, 4, 5, 6, 7, 4, 5, 7, 8, 4, 5, 8, 9, 4, 5, 9, 10, 4, 5, 10, 11, 4, 5, 11, 12, 4, 5, 12, 13, 4, 5, 13, 14, 4, 5, 14, 15, 4, 5, 15, 16, 4, 5, 16, 17, 4, 5, 17, 18, 4, 5, 18, 19, 4, 5, 19, 20, 4, 5, 20, 21, 4, 5, 21, 22, 4, 5, 22, 23, 4, 5, 23, 24, 4, 5, 24, 25, 4, 5, 25, 26, 4, 5, 26, 27, 4, 5, 27, 28, 4, 5, 28, 29, 4, 5, 29, 30, 4, 5, 30, 31, 4, 5, 31, 32, 4, 5, 32, 1, 5, 6, 1, 2, 5, 6, 2, 3, 5, 6, 3, 4, 5, 6, 7, 8, 5, 6, 8, 9, 5, 6, 9, 10, 5, 6, 10, 11, 5, 6, 11, 12, 5, 6, 12, 13, 5, 6, 13, 14, 5, 6, 14, 15, 5, 6, 15, 16, 5, 6, 16, 17, 5, 6, 17, 18, 5, 6, 18, 19, 5, 6, 19, 20, 5, 6, 20, 21, 5, 6, 21, 22, 5, 6, 22, 23, 5, 6, 23, 24, 5, 6, 24, 25, 5, 6, 25, 26, 5, 6, 26, 27, 5, 6, 27, 28, 5, 6, 28, 29, 5, 6, 29, 30, 5, 6, 30, 31, 5, 6, 31, 32, 5, 6, 32, 1, 6, 7, 1, 2, 6, 7, 2, 3, 6, 7, 3, 4, 6, 7, 4, 5, 6, 7, 8, 9, 6, 7, 9, 10, 6, 7, 10, 11, 6, 7, 11, 12, 6, 7, 12, 13, 6, 7, 13, 14, 6, 7, 14, 15, 6, 7, 15, 16, 6, 7, 16, 17, 6, 7, 17, 18, 6, 7, 18, 19, 6, 7, 19, 20, 6, 7, 20, 21, 6, 7, 21, 22, 6, 7, 22, 23, 6, 7, 23, 24, 6, 7, 24, 25, 6, 7, 25, 26, 6, 7, 26, 27, 6, 7, 27, 28, 6, 7, 28, 29, 6, 7, 29, 30, 6, 7, 30, 31, 6, 7, 31, 32, 6, 7, 32, 1, 7, 8, 1, 2, 7, 8, 2, 3, 7, 8, 3, 4, 7, 8, 4, 5, 7, 8, 5, 6, 7, 8, 9, 10, 7, 8, 10, 11, 7, 8, 11, 12, 7, 8, 12, 13, 7, 8, 13, 14, 7, 8, 14, 15, 7, 8, 15, 16, 7, 8, 16, 17, 7, 8, 17, 18, 7, 8, 18, 19, 7, 8, 19, 20, 7, 8, 20, 21, 7, 8, 21, 22, 7, 8, 22, 23, 7, 8, 23, 24, 7, 8, 24, 25, 7, 8, 25, 26, 7, 8, 26, 27, 7, 8, 27, 28, 7, 8, 28, 29, 7, 8, 29, 30, 7, 8, 30, 31, 7, 8, 31, 32, 7, 8, 32, 1, 8, 9, 1, 2, 8, 9, 2, 3, 8, 9, 3, 4, 8, 9, 4, 5, 8, 9, 5, 6, 8, 9, 6, 7, 8, 9, 10, 11, 8, 9, 11, 12, 8, 9, 12, 13, 8, 9, 13, 14, 8, 9, 14, 15, 8, 9, 15, 16, 8, 9, 16, 17, 8, 9, 17, 18, 8, 9, 18, 19, 8, 9, 19, 20, 8, 9, 20, 21, 8, 9, 21, 22, 8, 9, 22, 23, 8, 9, 23, 24, 8, 9, 24, 25, 8, 9, 25, 26, 8, 9, 26, 27, 8, 9, 27, 28, 8, 9, 28, 29, 8, 9, 29, 30, 8, 9, 30, 31, 8, 9, 31, 32, 8, 9, 32, 1, 9, 10, 1, 2, 9, 10, 2, 3, 9, 10, 3, 4, 9, 10, 4, 5, 9, 10, 5, 6, 9, 10, 6, 7, 9, 10, 7, 8, 9, 10, 11, 12, 9, 10, 12, 13, 9, 10, 13, 14, 9, 10, 14, 15, 9, 10, 15, 16, 9, 10, 16, 17, 9, 10, 17, 18, 9, 10, 18, 19, 9, 10, 19, 20, 9, 10, 20, 21, 9, 10, 21, 22, 9, 10, 22, 23, 9, 10, 23, 24, 9, 10, 24, 25, 9, 10, 25, 26, 9, 10, 26, 27, 9, 10, 27, 28, 9, 10, 28, 29, 9, 10, 29, 30, 9, 10, 30, 31, 9, 10, 31, 32, 9, 10, 32, 1, 10, 11, 1, 2, 10, 11, 2, 3, 10, 11, 3, 4, 10, 11, 4, 5, 10, 11, 5, 6, 10, 11, 6, 7, 10, 11, 7, 8, 10, 11, 8, 9, 10, 11, 12, 13, 10, 11, 13, 14, 10, 11, 14, 15, 10, 11, 15, 16, 10, 11, 16, 17, 10, 11, 17, 18, 10, 11, 18, 19, 10, 11, 19, 20, 10, 11, 20, 21, 10, 11, 21, 22, 10, 11, 22, 23, 10, 11, 23, 24, 10, 11, 24, 25, 10, 11, 25, 26, 10, 11, 26, 27, 10, 11, 27, 28, 10, 11, 28, 29, 10, 11, 29, 30, 10, 11, 30, 31, 10, 11, 31, 32, 10, 11, 32, 1, 11, 12, 1, 2, 11, 12, 2, 3, 11, 12, 3, 4, 11, 12, 4, 5, 11, 12, 5, 6, 11, 12, 6, 7, 11, 12, 7, 8, 11, 12, 8, 9, 11, 12, 9, 10, 11, 12, 13, 14, 11, 12, 14, 15, 11, 12, 15, 16, 11, 12, 16, 17, 11, 12, 17, 18, 11, 12, 18, 19, 11, 12, 19, 20, 11, 12, 20, 21, 11, 12, 21, 22, 11, 12, 22, 23, 11, 12, 23, 24, 11, 12, 24, 25, 11, 12, 25, 26, 11, 12, 26, 27, 11, 12, 27, 28, 11, 12, 28, 29, 11, 12, 29, 30, 11, 12, 30, 31, 11, 12, 31, 32, 11, 12, 32, 1, 12, 13, 1, 2, 12, 13, 2, 3, 12, 13, 3, 4, 12, 13, 4, 5, 12, 13, 5, 6, 12, 13, 6, 7, 12, 13, 7, 8, 12, 13, 8, 9, 12, 13, 9, 10, 12, 13, 10, 11, 12, 13, 14, 15, 12, 13, 15, 16, 12, 13, 16, 17, 12, 13, 17, 18, 12, 13, 18, 19, 12, 13, 19, 20, 12, 13, 20, 21, 12, 13, 21, 22, 12, 13, 22, 23, 12, 13, 23, 24, 12, 13, 24, 25, 12, 13, 25, 26, 12, 13, 26, 27, 12, 13, 27, 28, 12, 13, 28, 29, 12, 13, 29, 30, 12, 13, 30, 31, 12, 13, 31, 32, 12, 13, 32, 1, 13, 14, 1, 2, 13, 14, 2, 3, 13, 14, 3, 4, 13, 14, 4, 5, 13, 14, 5, 6, 13, 14, 6, 7, 13, 14, 7, 8, 13, 14, 8, 9, 13, 14, 9, 10, 13, 14, 10, 11, 13, 14, 11, 12, 13, 14, 15, 16, 13, 14, 16, 17, 13, 14, 17, 18, 13, 14, 18, 19, 13, 14, 19, 20, 13, 14, 20, 21, 13, 14, 21, 22, 13, 14, 22, 23, 13, 14, 23, 24, 13, 14, 24, 25, 13, 14, 25, 26, 13, 14, 26, 27, 13, 14, 27, 28, 13, 14, 28, 29, 13, 14, 29, 30, 13, 14, 30, 31, 13, 14, 31, 32, 13, 14, 32, 1, 14, 15, 1, 2, 14, 15, 2, 3, 14, 15, 3, 4, 14, 15, 4, 5, 14, 15, 5, 6, 14, 15, 6, 7, 14, 15, 7, 8, 14, 15, 8, 9, 14, 15, 9, 10, 14, 15, 10, 11, 14, 15, 11, 12, 14, 15, 12, 13, 14, 15, 16, 17, 14, 15, 17, 18, 14, 15, 18, 19, 14, 15, 19, 20, 14, 15, 20, 21, 14, 15, 21, 22, 14, 15, 22, 23, 14, 15, 23, 24, 14, 15, 24, 25, 14, 15, 25, 26, 14, 15, 26, 27, 14, 15, 27, 28, 14, 15, 28, 29, 14, 15, 29, 30, 14, 15, 30, 31, 14, 15, 31, 32, 14, 15, 32, 1, 15, 16, 1, 2, 15, 16, 2, 3, 15, 16, 3, 4, 15, 16, 4, 5, 15, 16, 5, 6, 15, 16, 6, 7, 15, 16, 7, 8, 15, 16, 8, 9, 15, 16, 9, 10, 15, 16, 10, 11, 15, 16, 11, 12, 15, 16, 12, 13, 15, 16, 13, 14, 15, 16, 17, 18, 15, 16, 18, 19, 15, 16, 19, 20, 15, 16, 20, 21, 15, 16, 21, 22, 15, 16, 22, 23, 15, 16, 23, 24, 15, 16, 24, 25, 15, 16, 25, 26, 15, 16, 26, 27, 15, 16, 27, 28, 15, 16, 28, 29, 15, 16, 29, 30, 15, 16, 30, 31, 15, 16, 31, 32, 15, 16, 32, 1, 16, 17, 1, 2, 16, 17, 2, 3, 16, 17, 3, 4, 16, 17, 4, 5, 16, 17, 5, 6, 16, 17, 6, 7, 16, 17, 7, 8, 16, 17, 8, 9, 16, 17, 9, 10, 16, 17, 10, 11, 16, 17, 11, 12, 16, 17, 12, 13, 16, 17, 13, 14, 16, 17, 14, 15, 16, 17, 18, 19, 16, 17, 19, 20, 16, 17, 20, 21, 16, 17, 21, 22, 16, 17, 22, 23, 16, 17, 23, 24, 16, 17, 24, 25, 16, 17, 25, 26, 16, 17, 26, 27, 16, 17, 27, 28, 16, 17, 28, 29, 16, 17, 29, 30, 16, 17, 30, 31, 16, 17, 31, 32, 16, 17, 32, 1, 17, 18, 1, 2, 17, 18, 2, 3, 17, 18, 3, 4, 17, 18, 4, 5, 17, 18, 5, 6, 17, 18, 6, 7, 17, 18, 7, 8, 17, 18, 8, 9, 17, 18, 9, 10, 17, 18, 10, 11, 17, 18, 11, 12, 17, 18, 12, 13, 17, 18, 13, 14, 17, 18, 14, 15, 17, 18, 15, 16, 17, 18, 19, 20, 17, 18, 20, 21, 17, 18, 21, 22, 17, 18, 22, 23, 17, 18, 23, 24, 17, 18, 24, 25, 17, 18, 25, 26, 17, 18, 26, 27, 17, 18, 27, 28, 17, 18, 28, 29, 17, 18, 29, 30, 17, 18, 30, 31, 17, 18, 31, 32, 17, 18, 32, 1, 18, 19, 1, 2, 18, 19, 2, 3, 18, 19, 3, 4, 18, 19, 4, 5, 18, 19, 5, 6, 18, 19, 6, 7, 18, 19, 7, 8, 18, 19, 8, 9, 18, 19, 9, 10, 18, 19, 10, 11, 18, 19, 11, 12, 18, 19, 12, 13, 18, 19, 13, 14, 18, 19, 14, 15, 18, 19, 15, 16, 18, 19, 16, 17, 18, 19, 20, 21, 18, 19, 21, 22, 18, 19, 22, 23, 18, 19, 23, 24, 18, 19, 24, 25, 18, 19, 25, 26, 18, 19, 26, 27, 18, 19, 27, 28, 18, 19, 28, 29, 18, 19, 29, 30, 18, 19, 30, 31, 18, 19, 31, 32, 18, 19, 32, 1, 19, 20, 1, 2, 19, 20, 2, 3, 19, 20, 3, 4, 19, 20, 4, 5, 19, 20, 5, 6, 19, 20, 6, 7, 19, 20, 7, 8, 19, 20, 8, 9, 19, 20, 9, 10, 19, 20, 10, 11, 19, 20, 11, 12, 19, 20, 12, 13, 19, 20, 13, 14, 19, 20, 14, 15, 19, 20, 15, 16, 19, 20, 16, 17, 19, 20, 17, 18, 19, 20, 21, 22, 19, 20, 22, 23, 19, 20, 23, 24, 19, 20, 24, 25, 19, 20, 25, 26, 19, 20, 26, 27, 19, 20, 27, 28, 19, 20, 28, 29, 19, 20, 29, 30, 19, 20, 30, 31, 19, 20, 31, 32, 19, 20, 32, 1, 20, 21, 1, 2, 20, 21, 2, 3, 20, 21, 3, 4, 20, 21, 4, 5, 20, 21, 5, 6, 20, 21, 6, 7, 20, 21, 7, 8, 20, 21, 8, 9, 20, 21, 9, 10, 20, 21, 10, 11, 20, 21, 11, 12, 20, 21, 12, 13, 20, 21, 13, 14, 20, 21, 14, 15, 20, 21, 15, 16, 20, 21, 16, 17, 20, 21, 17, 18, 20, 21, 18, 19, 20, 21, 22, 23, 20, 21, 23, 24, 20, 21, 24, 25, 20, 21, 25, 26, 20, 21, 26, 27, 20, 21, 27, 28, 20, 21, 28, 29, 20, 21, 29, 30, 20, 21, 30, 31, 20, 21, 31, 32, 20, 21, 32, 1, 21, 22, 1, 2, 21, 22, 2, 3, 21, 22, 3, 4, 21, 22, 4, 5, 21, 22, 5, 6, 21, 22, 6, 7, 21, 22, 7, 8, 21, 22, 8, 9, 21, 22, 9, 10, 21, 22, 10, 11, 21, 22, 11, 12, 21, 22, 12, 13, 21, 22, 13, 14, 21, 22, 14, 15, 21, 22, 15, 16, 21, 22, 16, 17, 21, 22, 17, 18, 21, 22, 18, 19, 21, 22, 19, 20, 21, 22, 23, 24, 21, 22, 24, 25, 21, 22, 25, 26, 21, 22, 26, 27, 21, 22, 27, 28, 21, 22, 28, 29, 21, 22, 29, 30, 21, 22, 30, 31, 21, 22, 31, 32, 21, 22, 32, 1, 22, 23, 1, 2, 22, 23, 2, 3, 22, 23, 3, 4, 22, 23, 4, 5, 22, 23, 5, 6, 22, 23, 6, 7, 22, 23, 7, 8, 22, 23, 8, 9, 22, 23, 9, 10, 22, 23, 10, 11, 22, 23, 11, 12, 22, 23, 12, 13, 22, 23, 13, 14, 22, 23, 14, 15, 22, 23, 15, 16, 22, 23, 16, 17, 22, 23, 17, 18, 22, 23, 18, 19, 22, 23, 19, 20, 22, 23, 20, 21, 22, 23, 24, 25, 22, 23, 25, 26, 22, 23, 26, 27, 22, 23, 27, 28, 22, 23, 28, 29, 22, 23, 29, 30, 22, 23, 30, 31, 22, 23, 31, 32, 22, 23, 32, 1, 23, 24, 1, 2, 23, 24, 2, 3, 23, 24, 3, 4, 23, 24, 4, 5, 23, 24, 5, 6, 23, 24, 6, 7, 23, 24, 7, 8, 23, 24, 8, 9, 23, 24, 9, 10, 23, 24, 10, 11, 23, 24, 11, 12, 23, 24, 12, 13, 23, 24, 13, 14, 23, 24, 14, 15, 23, 24, 15, 16, 23, 24, 16, 17, 23, 24, 17, 18, 23, 24, 18, 19, 23, 24, 19, 20, 23, 24, 20, 21, 23, 24, 21, 22, 23, 24, 25, 26, 23, 24, 26, 27, 23, 24, 27, 28, 23, 24, 28, 29, 23, 24, 29, 30, 23, 24, 30, 31, 23, 24, 31, 32, 23, 24, 32, 1, 24, 25, 1, 2, 24, 25, 2, 3, 24, 25, 3, 4, 24, 25, 4, 5, 24, 25, 5, 6, 24, 25, 6, 7, 24, 25, 7, 8, 24, 25, 8, 9, 24, 25, 9, 10, 24, 25, 10, 11, 24, 25, 11, 12, 24, 25, 12, 13, 24, 25, 13, 14, 24, 25, 14, 15, 24, 25, 15, 16, 24, 25, 16, 17, 24, 25, 17, 18, 24, 25, 18, 19, 24, 25, 19, 20, 24, 25, 20, 21, 24, 25, 21, 22, 24, 25, 22, 23, 24, 25, 26, 27, 24, 25, 27, 28, 24, 25, 28, 29, 24, 25, 29, 30, 24, 25, 30, 31, 24, 25, 31, 32, 24, 25, 32, 1, 25, 26, 1, 2, 25, 26, 2, 3, 25, 26, 3, 4, 25, 26, 4, 5, 25, 26, 5, 6, 25, 26, 6, 7, 25, 26, 7, 8, 25, 26, 8, 9, 25, 26, 9, 10, 25, 26, 10, 11, 25, 26, 11, 12, 25, 26, 12, 13, 25, 26, 13, 14, 25, 26, 14, 15, 25, 26, 15, 16, 25, 26, 16, 17, 25, 26, 17, 18, 25, 26, 18, 19, 25, 26, 19, 20, 25, 26, 20, 21, 25, 26, 21, 22, 25, 26, 22, 23, 25, 26, 23, 24, 25, 26, 27, 28, 25, 26, 28, 29, 25, 26, 29, 30, 25, 26, 30, 31, 25, 26, 31, 32, 25, 26, 32, 1, 26, 27, 1, 2, 26, 27, 2, 3, 26, 27, 3, 4, 26, 27, 4, 5, 26, 27, 5, 6, 26, 27, 6, 7, 26, 27, 7, 8, 26, 27, 8, 9, 26, 27, 9, 10, 26, 27, 10, 11, 26, 27, 11, 12, 26, 27, 12, 13, 26, 27, 13, 14, 26, 27, 14, 15, 26, 27, 15, 16, 26, 27, 16, 17, 26, 27, 17, 18, 26, 27, 18, 19, 26, 27, 19, 20, 26, 27, 20, 21, 26, 27, 21, 22, 26, 27, 22, 23, 26, 27, 23, 24, 26, 27, 24, 25, 26, 27, 28, 29, 26, 27, 29, 30, 26, 27, 30, 31, 26, 27, 31, 32, 26, 27, 32, 1, 27, 28, 1, 2, 27, 28, 2, 3, 27, 28, 3, 4, 27, 28, 4, 5, 27, 28, 5, 6, 27, 28, 6, 7, 27, 28, 7, 8, 27, 28, 8, 9, 27, 28, 9, 10, 27, 28, 10, 11, 27, 28, 11, 12, 27, 28, 12, 13, 27, 28, 13, 14, 27, 28, 14, 15, 27, 28, 15, 16, 27, 28, 16, 17, 27, 28, 17, 18, 27, 28, 18, 19, 27, 28, 19, 20, 27, 28, 20, 21, 27, 28, 21, 22, 27, 28, 22, 23, 27, 28, 23, 24, 27, 28, 24, 25, 27, 28, 25, 26, 27, 28, 29, 30, 27, 28, 30, 31, 27, 28, 31, 32, 27, 28, 32, 1, 28, 29, 1, 2, 28, 29, 2, 3, 28, 29, 3, 4, 28, 29, 4, 5, 28, 29, 5, 6, 28, 29, 6, 7, 28, 29, 7, 8, 28, 29, 8, 9, 28, 29, 9, 10, 28, 29, 10, 11, 28, 29, 11, 12, 28, 29, 12, 13, 28, 29, 13, 14, 28, 29, 14, 15, 28, 29, 15, 16, 28, 29, 16, 17, 28, 29, 17, 18, 28, 29, 18, 19, 28, 29, 19, 20, 28, 29, 20, 21, 28, 29, 21, 22, 28, 29, 22, 23, 28, 29, 23, 24, 28, 29, 24, 25, 28, 29, 25, 26, 28, 29, 26, 27, 28, 29, 30, 31, 28, 29, 31, 32, 28, 29, 32, 1, 29, 30, 1, 2, 29, 30, 2, 3, 29, 30, 3, 4, 29, 30, 4, 5, 29, 30, 5, 6, 29, 30, 6, 7, 29, 30, 7, 8, 29, 30, 8, 9, 29, 30, 9, 10, 29, 30, 10, 11, 29, 30, 11, 12, 29, 30, 12, 13, 29, 30, 13, 14, 29, 30, 14, 15, 29, 30, 15, 16, 29, 30, 16, 17, 29, 30, 17, 18, 29, 30, 18, 19, 29, 30, 19, 20, 29, 30, 20, 21, 29, 30, 21, 22, 29, 30, 22, 23, 29, 30, 23, 24, 29, 30, 24, 25, 29, 30, 25, 26, 29, 30, 26, 27, 29, 30, 27, 28, 29, 30, 31, 32, 29, 30, 32, 1, 30, 31, 1, 2, 30, 31, 2, 3, 30, 31, 3, 4, 30, 31, 4, 5, 30, 31, 5, 6, 30, 31, 6, 7, 30, 31, 7, 8, 30, 31, 8, 9, 30, 31, 9, 10, 30, 31, 10, 11, 30, 31, 11, 12, 30, 31, 12, 13, 30, 31, 13, 14, 30, 31, 14, 15, 30, 31, 15, 16, 30, 31, 16, 17, 30, 31, 17, 18, 30, 31, 18, 19, 30, 31, 19, 20, 30, 31, 20, 21, 30, 31, 21, 22, 30, 31, 22, 23, 30, 31, 23, 24, 30, 31, 24, 25, 30, 31, 25, 26, 30, 31, 26, 27, 30, 31, 27, 28, 30, 31, 28, 29, 30, 31, 32, 1, 31, 32, 1, 2, 31, 32, 2, 3, 31, 32, 3, 4, 31, 32, 4, 5, 31, 32, 5, 6, 31, 32, 6, 7, 31, 32, 7, 8, 31, 32, 8, 9, 31, 32, 9, 10, 31, 32, 10, 11, 31, 32, 11, 12, 31, 32, 12, 13, 31, 32, 13, 14, 31, 32, 14, 15, 31, 32, 15, 16, 31, 32, 16, 17, 31, 32, 17, 18, 31, 32, 18, 19, 31, 32, 19, 20, 31, 32, 20, 21, 31, 32, 21, 22, 31, 32, 22, 23, 31, 32, 23, 24, 31, 32, 24, 25, 31, 32, 25, 26, 31, 32, 26, 27, 31, 32, 27, 28, 31, 32, 28, 29, 31, 32, 29, 30, 32, 1, 2, 3, 32, 1, 3, 4, 32, 1, 4, 5, 32, 1, 5, 6, 32, 1, 6, 7, 32, 1, 7, 8, 32, 1, 8, 9, 32, 1, 9, 10, 32, 1, 10, 11, 32, 1, 11, 12, 32, 1, 12, 13, 32, 1, 13, 14, 32, 1, 14, 15, 32, 1, 15, 16, 32, 1, 16, 17, 32, 1, 17, 18, 32, 1, 18, 19, 32, 1, 19, 20, 32, 1, 20, 21, 32, 1, 21, 22, 32, 1, 22, 23, 32, 1, 23, 24, 32, 1, 24, 25, 32, 1, 25, 26, 32, 1, 26, 27, 32, 1, 27, 28, 32, 1, 28, 29, 32, 1, 29, 30, 32, 1, 30, 31
};

typedef enum { AD, OP, MONO } meas_t;

extern volatile uint32_t F_CPU_ACTUAL;

// GPIO Pin to analog channel mapping from Arduino\hardware\teensy\avr\cores\teensy4\analog.c
extern const uint8_t pin_to_channel[42];

// Mapping of electrode number (input) to MUX channel (output)
//const uint8_t elec_to_mux[32] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 14, 13, 12, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16 };
const uint8_t elec_to_mux[32] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
// const uint8_t elec_to_mux2[32] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };

// Global calibration parameters
uint16_t current_gain, voltage_gain;
float sample_rate;
uint16_t samples_per_period;
uint16_t num_samples;
double ref_signal_mag;
double phase_offset;

// double signal_rms[NUM_MEAS];    // Store signal RMS data
//double signal_mag[NUM_MEAS];    // Store signal magnitude data
// double signal_phase[NUM_MEAS];  // Store signal phase data

double cur_frame[NUM_MEAS] = {0};
uint32_t frame_delay = 0;
uint32_t frame_delay_prev = 0;

uint8_t pin_num = 0;
uint16_t rheo_val = 1023;

uint32_t t0;

/* Shift a byte out serially with the given frequency in Hz (<= 500kHz) */
void spi_write(uint8_t data_pin, uint8_t clock_pin, uint32_t freq, uint8_t bit_order, uint8_t mode, uint8_t bits, uint32_t val)
{
    uint32_t period = (freq >= 500000) ? 1 : (500000 / freq);   // Half clock period in uS
    uint8_t cpol = (mode == SPI_MODE2 || mode == SPI_MODE3);
    uint8_t cpha = (mode == SPI_MODE1 || mode == SPI_MODE3);
    uint8_t sck = cpol ? HIGH : LOW;

    uint8_t i;
    uint32_t start_time;

    // Set clock idle for 2 periods
    digitalWrite(clock_pin, sck);
    delayMicroseconds(period*4);

    for (i = 0; i < bits; i++)  {
        start_time = micros();

        // Shift bit out
        if (bit_order == LSBFIRST)
            digitalWrite(data_pin, !!(val & (1 << i)));
        else    
            digitalWrite(data_pin, !!(val & (1 << ((bits-1) - i))));

        // Toggle clock leading edge
        sck = !sck;
        if (cpha) {
            digitalWrite(clock_pin, sck);
            while(micros() - start_time < period);
        } else {
            while(micros() - start_time < period);
            digitalWrite(clock_pin, sck);
        }

        // Toggle clock trailing edge
        start_time = micros();
        sck = !sck;
        if (cpha) {
            digitalWrite(clock_pin, sck);
            while(micros() - start_time < period);
        } else {
            while(micros() - start_time < period);
            digitalWrite(clock_pin, sck);
        }
    }
}

/* Write a 4-bit command and a 10-bit data word */
void AD5270_Write(const int chip_sel, uint8_t cmd, uint16_t data)
{
    uint16_t data_word = ((cmd & 0x0F) << 10) | (data & 0x03FF);
  
//    SPI.beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE1));
//    digitalWrite(chip_sel, LOW);
//    SPI.transfer16(data_word);
//    digitalWrite(chip_sel, HIGH);
//    SPI.endTransaction();

    digitalWrite(chip_sel, LOW);
    delayMicroseconds(500); // could change smaller for speed
    // delayMicroseconds(100);
    spi_write(VSPI_MOSI_PIN, VSPI_SCK_PIN, SPI_FREQ_FAST, MSBFIRST, SPI_MODE1, 16, data_word);
    delayMicroseconds(500); // could change smaller for speed
    // delayMicroseconds(100);
    digitalWrite(chip_sel, HIGH);
}

/* Enable/disable rheostat value changes */
void AD5270_Lock(const int chip_sel, uint8_t lock)
{
    AD5270_Write(chip_sel, CMD_WR_CTRL, lock ? 0 : 0x002);
}

/* Enable/disable hardware shutdown */
void AD5270_Shutdown(const int chip_sel, uint8_t shutdown)
{
    AD5270_Write(chip_sel, CMD_SHTDN, shutdown ? 1 : 0);
}

/* Set the value of the digital rheostat - range is 0-0x3FF (0-100kOhm) */
void AD5270_Set(const int chip_sel, uint16_t val)
{
    AD5270_Write(chip_sel, CMD_WR_RDAC, val);
}

/* Write a 12-bit data word into a register. Register addresses are 4 bits */
void AD5930_Write(uint8_t reg, uint16_t data)
{
    uint16_t data_word = ((reg & 0x0F) << 12) | (data & 0x0FFF);
  
//    SPI.beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE1));
//    digitalWrite(CHIP_SEL_AD5930, LOW);
//    SPI.transfer16(data_word);
//    digitalWrite(CHIP_SEL_AD5930, HIGH);
//    SPI.endTransaction();

    digitalWrite(CHIP_SEL_AD5930, LOW);
    spi_write(VSPI_MOSI_PIN, VSPI_SCK_PIN, SPI_FREQ_FAST, MSBFIRST, SPI_MODE1, 16, data_word);
    digitalWrite(CHIP_SEL_AD5930, HIGH);
}

/* Program the given frequency (in Hz) */
void AD5930_Set_Start_Freq(uint32_t freq)
{
    uint32_t scaled_freq = (freq * 1.0 / AD5930_CLK_FREQ) * 0x00FFFFFF;
    uint16_t freq_low = scaled_freq & 0x0FFF;
    uint16_t freq_high = (scaled_freq >> 12) & 0x0FFF;

    AD5930_Write(SFREQ_LOW_REG, freq_low);
    AD5930_Write(SFREQ_HIGH_REG, freq_high);
}

void mux_write(const int chip_sel, uint8_t pin_sel, uint8_t enable)
{
//    SPI.beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE2));
//    digitalWrite(chip_sel, LOW);
//    if (enable)
//        SPI.transfer(pin_sel & 0x1F);
//    else
//        SPI.transfer(0xC0 | (pin_sel & 0x1F));
//    digitalWrite(chip_sel, HIGH);
//    SPI.endTransaction();

    digitalWrite(chip_sel, LOW);
    if (enable)
        spi_write(HSPI_MOSI_PIN, HSPI_SCK_PIN, SPI_FREQ_SLOW, MSBFIRST, SPI_MODE1, 8, pin_sel & 0x1F);
    else
        spi_write(HSPI_MOSI_PIN, HSPI_SCK_PIN, SPI_FREQ_SLOW, MSBFIRST, SPI_MODE1, 8, 0xC0 | (pin_sel & 0x1F));
    digitalWrite(chip_sel, HIGH);
}

/* Return unsigned integer (0-1023) from 10 continuous GPIO pins (14-23, MSb on 14) (takes ~50.1ns) */
uint16_t analog_read()
{
    // GPIO reg bit order: 2, 3, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27
    // Teensy pin order:   1, 0, 19, 18, 14, 15, 17, 16, 22, 23, 20, 21
    // All pins are on GPIO6
    
    uint16_t gpio_reg = *(&GPIO6_DR + 2) >> 16;
    uint16_t val = ((gpio_reg & 0x0200) >> 9) | // Pin 23 (GPIO 25)
                   ((gpio_reg & 0x0100) >> 7) | // Pin 22 (GPIO 24)
                   ((gpio_reg & 0x0800) >> 9) | // Pin 21 (GPIO 27)
                   ((gpio_reg & 0x0400) >> 7) | // Pin 20 (GPIO 26)
                   ((gpio_reg & 0x0003) << 4) | // Pins 19,18 (GPIO 16,17)
                    (gpio_reg & 0x00C0) |       // Pins 17,16 (GPIO 22,23)
                   ((gpio_reg & 0x0008) << 5) | // Pin 15 (GPIO 19)
                   ((gpio_reg & 0x0004) << 7);  // Pin 14 (GPIO 18)
    return val;
}

/* Read 10 continuous GPIO pins (14-23) (takes ~16.8ns) */
uint16_t gpio_read()
{
    return (*(&GPIO6_DR + 2) >> 16);
}

/* Convert GPIO reading to 10-bit unsigned integer (takes ~33.3ns) */
uint16_t gpio_convert(uint16_t gpio_reg)
{  
    uint16_t val = ((gpio_reg & 0x0200) >> 9) | // Pin 23 (GPIO 25)
                   ((gpio_reg & 0x0100) >> 7) | // Pin 22 (GPIO 24)
                   ((gpio_reg & 0x0800) >> 9) | // Pin 21 (GPIO 27)
                   ((gpio_reg & 0x0400) >> 7) | // Pin 20 (GPIO 26)
                   ((gpio_reg & 0x0003) << 4) | // Pins 19,18 (GPIO 17,16)
                    (gpio_reg & 0x00C0) |       // Pins 17,16 (GPIO 22,23)
                   ((gpio_reg & 0x0008) << 5) | // Pin 15 (GPIO 19)
                   ((gpio_reg & 0x0004) << 7);  // Pin 14 (GPIO 18)
    return val;
}

/* Return the magnitude and phase offset of a sinusoidal input signal */
uint32_t read_signal(double * rms, double * mag, double * phase, uint16_t * error_rate, uint8_t debug)
{ 
    uint16_t i, j;
    uint16_t phase_count;
    uint16_t adc_min = 1023;
    uint16_t adc_max = 0;
    uint8_t adc_peak_count = 0;
    uint8_t adc_trough_count = 0;
    uint8_t ref_period_count = 0;
    uint8_t adc_period_count = 0;
    uint8_t phase_readings = 0;
    uint16_t phase_start_index = 0;

    uint16_t gpio_buf[num_samples][ADC_AVG];    // Store raw ADC samples of the input waveform
    uint16_t adc_buf[num_samples];              // Store converted ADC samples of the input waveform
    uint8_t ref_buf[num_samples];               // Store high-low values of the square output waveform
    uint16_t adc_peaks[num_samples];
    uint16_t adc_troughs[num_samples];
    uint16_t phase_cycles[num_samples];
    
    uint32_t time1, time2;
    uint32_t count, num_cycles;
    uint32_t sample_sum, total_sum = 0;
    
    time1 = micros();

    /* Collect samples */
    for(i = 0; i < num_samples; i++)
    { 
        //num_cycles = ((F_CPU_ACTUAL >> 16) * 50) / (1000000000UL >> 16);   // Number of systick cycles equal to 50ns
        num_cycles = 20;
        count = 0;

        // Read GPIO pins
        for (j = 0; j < ADC_AVG; j++)
        {
            while (ARM_DWT_CYCCNT - count < num_cycles);   // Wait set number of cycles since last count
            count = ARM_DWT_CYCCNT;

            gpio_buf[i][j] = gpio_read();
        }
        ref_buf[i] = digitalRead(AD5930_MSBOUT_PIN);
    }

    time2 = micros();

    /* Process samples */
    for(i = 0; i < num_samples; i++)
    {       
        for (j = 0, sample_sum = 0; j < ADC_AVG; j++)
            sample_sum += gpio_convert(gpio_buf[i][j]);    // Get 10-bit ADC value from raw GPIO value
        adc_buf[i] = sample_sum / ADC_AVG;

        /* Store product for RMS calculation */
        int16_t adc_val = (int16_t)adc_buf[i] - 512;
        total_sum += adc_val * adc_val;

        /* Store local max/min */
        if (adc_buf[i] > adc_max)
            adc_max = adc_buf[i];
        if (adc_buf[i] < adc_min)
            adc_min = adc_buf[i];

        if (i > 0)
        {
            /* Signal increasing, entering peak */
            if (adc_buf[i] > 512 && adc_buf[i-1] <= 512)
            {
                /* Ensure that a full half-cycle has been measured */
                if (adc_period_count > 0)
                {
                    adc_troughs[adc_trough_count] = adc_min;
                    adc_trough_count++;
                    adc_min = 1023;

                    /* Discard large phase offsets as error */
                    if (phase_count <= samples_per_period)
                    {
                        phase_cycles[phase_readings] = phase_count;
                        phase_readings++;
                    }
                }
                adc_period_count++;

                /* Record index of first rising zero point */
                if (phase_start_index == 0)
                    phase_start_index = i;
            }

            /* Signal decreasing, entering trough */
            else if (adc_buf[i] < 512 && adc_buf[i-1] >= 512)
            {
                if (adc_period_count > 0)
                {
                    adc_peaks[adc_peak_count] = adc_max;
                    adc_peak_count++;
                    adc_max = 0;

                    /* Discard large phase offsets as error */
                    if (phase_count <= samples_per_period)
                    {
                        phase_cycles[phase_readings] = phase_count;
                        phase_readings++;
                    }
                }
                adc_period_count++;
            }

            phase_count++;
            
            /* Reference signal transition */
            if ((ref_buf[i] && !ref_buf[i-1]) || (!ref_buf[i] && ref_buf[i-1]))
            {
                ref_period_count++;
                phase_count = 0;
            }
        }
    }

    /* Calculate average peaks and troughs */
    for (i = 0, sample_sum =  0; i < adc_peak_count; i++)
        sample_sum += adc_peaks[i];
    adc_max = sample_sum / adc_peak_count;
    for (i = 0, sample_sum = 0; i < adc_trough_count; i++)
        sample_sum += adc_troughs[i];
    adc_min = sample_sum / adc_trough_count;

//    for (i = 0, sample_sum =  0; i < NUM_PERIODS; i++)
//        sample_sum += adc_peaks[i];
//    adc_max = sample_sum / NUM_PERIODS;
//    for (i = 0, sample_sum = 0; i < NUM_PERIODS; i++)
//        sample_sum += adc_troughs[i];
//    adc_min = sample_sum / NUM_PERIODS;

    /* Calculate phase offset */
    int16_t phase_offset_cycles;
    for (i = 0, sample_sum = 0; i < phase_readings; i++)
        sample_sum += phase_cycles[i];
    phase_offset_cycles = sample_sum / phase_readings;

    /* Calculate peak-to-peak magnitude and RMS */
    uint16_t mag_10bit = adc_max - adc_min;
    uint16_t rms_10bit = sqrt(total_sum / num_samples);
//    uint16_t mag_10bit = rms_10bit * sqrt(2) * 2;

    if (rms)
        *rms = (double)rms_10bit * 2.2 / 1024;
    if (mag)
        *mag = (double)mag_10bit * 2.2 / 1024;                                                      
    if (phase)
        *phase = (sample_rate * phase_offset_cycles / 1000000) * TEST_FREQ * 2*PI;   

    if (error_rate)
    {
        // Compare measured signal to sine wave (only if >=2 period samples are available)
        uint16_t compare_periods = 2;
        if ((num_samples - phase_start_index) >= (samples_per_period * compare_periods))
            *error_rate = sine_compare(adc_buf+phase_start_index, mag_10bit, samples_per_period, compare_periods);
    }

    if (debug)
    {
//        Serial.print(time1 / 1000);
//        Serial.print(".");
//        Serial.println(time1 % 1000);
//        Serial.print(time2 / 1000);
//        Serial.print(".");
//        Serial.println(time2 % 1000);
//        
//        for (i = 0; i < phase_readings; i++)
//        {
//            Serial.println(phase_cycles[i]);
//        }
//    
//        Serial.println(adc_max);
//        Serial.println(adc_min);
//        Serial.print(adc_max - adc_min);
//        Serial.print(mag_avg, 4);
//        Serial.print(*mag, 4);
//        Serial.print("\t");
//        Serial.println(*phase, 4);
//        Serial.println(phase_avg, 4);
//        Serial.println(phase_offset_cycles);
//        Serial.println(sqrt(*real * *real + *imag * *imag), 6);
//    
//        Serial.print("Val 1: ");
//        Serial.println(res1);
//        Serial.print("Val 2: ");
//        Serial.println(res2);
//    
//        Serial.print(ref_period_count);
//        Serial.print("\t");
//        Serial.println(adc_period_count);
//    
//        Serial.println(sample_rate, 4);
    }

    return (time2 - time1);
}


uint32_t read_signal_at_freq(int freq, bool printfigs)
{ 
    uint16_t i, j;
    uint16_t phase_count;
    uint16_t adc_min = 1023;
    uint16_t adc_max = 0;
    uint8_t adc_peak_count = 0;
    uint8_t adc_trough_count = 0;
    uint8_t ref_period_count = 0;
    uint8_t adc_period_count = 0;
    uint8_t phase_readings = 0;
    uint16_t phase_start_index = 0;

    uint16_t gpio_buf[num_samples][ADC_AVG];    // Store raw ADC samples of the input waveform
    uint16_t adc_buf[num_samples];              // Store converted ADC samples of the input waveform
    uint8_t ref_buf[num_samples];               // Store high-low values of the square output waveform
    uint16_t adc_peaks[num_samples];
    uint16_t adc_troughs[num_samples];
    uint16_t phase_cycles[num_samples];
    
    uint32_t time1, time2;
    uint32_t count, num_cycles;
    uint32_t sample_sum, total_sum = 0;
    
    time1 = micros();

    /* Collect samples */
    for(i = 0; i < num_samples; i++)
    { 
        //num_cycles = ((F_CPU_ACTUAL >> 16) * 50) / (1000000000UL >> 16);   // Number of systick cycles equal to 50ns
        num_cycles = 20;
        count = 0;

        // Read GPIO pins
        for (j = 0; j < ADC_AVG; j++)
        {
            while (ARM_DWT_CYCCNT - count < num_cycles);   // Wait set number of cycles since last count
            count = ARM_DWT_CYCCNT;

            gpio_buf[i][j] = gpio_read();
        }
        ref_buf[i] = digitalRead(AD5930_MSBOUT_PIN);
    }

    time2 = micros();

    /* Process samples */
    for(i = 0; i < num_samples; i++)
    {       
        for (j = 0, sample_sum = 0; j < ADC_AVG; j++)
            sample_sum += gpio_convert(gpio_buf[i][j]);    // Get 10-bit ADC value from raw GPIO value
        adc_buf[i] = sample_sum / ADC_AVG;

        /* Store product for RMS calculation */
        int16_t adc_val = (int16_t)adc_buf[i] - 512;
        total_sum += adc_val * adc_val;

        /* Store local max/min */
        if (adc_buf[i] > adc_max)
            adc_max = adc_buf[i];
        if (adc_buf[i] < adc_min)
            adc_min = adc_buf[i];

        if (i > 0)
        {
            /* Signal increasing, entering peak */
            if (adc_buf[i] > 512 && adc_buf[i-1] <= 512)
            {
                /* Ensure that a full half-cycle has been measured */
                if (adc_period_count > 0)
                {
                    adc_troughs[adc_trough_count] = adc_min;
                    adc_trough_count++;
                    adc_min = 1023;

                    /* Discard large phase offsets as error */
                    if (phase_count <= samples_per_period)
                    {
                        phase_cycles[phase_readings] = phase_count;
                        phase_readings++;
                    }
                }
                adc_period_count++;

                /* Record index of first rising zero point */
                if (phase_start_index == 0)
                    phase_start_index = i;
            }

            /* Signal decreasing, entering trough */
            else if (adc_buf[i] < 512 && adc_buf[i-1] >= 512)
            {
                if (adc_period_count > 0)
                {
                    adc_peaks[adc_peak_count] = adc_max;
                    adc_peak_count++;
                    adc_max = 0;

                    /* Discard large phase offsets as error */
                    if (phase_count <= samples_per_period)
                    {
                        phase_cycles[phase_readings] = phase_count;
                        phase_readings++;
                    }
                }
                adc_period_count++;
            }

            phase_count++;
            
            /* Reference signal transition */
            if ((ref_buf[i] && !ref_buf[i-1]) || (!ref_buf[i] && ref_buf[i-1]))
            {
                ref_period_count++;
                phase_count = 0;
            }
        }
    }

    /* Calculate average peaks and troughs */
    for (i = 0, sample_sum =  0; i < adc_peak_count; i++)
        sample_sum += adc_peaks[i];
    adc_max = sample_sum / adc_peak_count;
    for (i = 0, sample_sum = 0; i < adc_trough_count; i++)
        sample_sum += adc_troughs[i];
    adc_min = sample_sum / adc_trough_count;

//    for (i = 0, sample_sum =  0; i < NUM_PERIODS; i++)
//        sample_sum += adc_peaks[i];
//    adc_max = sample_sum / NUM_PERIODS;
//    for (i = 0, sample_sum = 0; i < NUM_PERIODS; i++)
//        sample_sum += adc_troughs[i];
//    adc_min = sample_sum / NUM_PERIODS;

    /* Calculate phase offset */
    int16_t phase_offset_cycles;
    for (i = 0, sample_sum = 0; i < phase_readings; i++)
        sample_sum += phase_cycles[i];
    phase_offset_cycles = sample_sum / phase_readings;

    /* Calculate peak-to-peak magnitude and RMS */
    uint16_t mag_10bit = adc_max - adc_min;
    uint16_t rms_10bit = sqrt(total_sum / num_samples);
//    uint16_t mag_10bit = rms_10bit * sqrt(2) * 2;

  if (printfigs) {
    // if (rms)
    //     *rms = (double)rms_10bit * 2.2 / 1024;
    // Serial.write((rms_10bit*100)&0x1F);
    // Serial.write((rms_10bit*100)>>8);
    // Serial.write((rms_10bit*10)&0x1F); // test 22/02
    // Serial.write((rms_10bit*10)>>8); // test 22/02
    Serial.write((rms_10bit/10)>>8); // changed 28/02 MSB FIRST
    Serial.write((rms_10bit/10)&0xFF); // changed 28/02 

    // if (phase)
    //     *phase = (sample_rate * phase_offset_cycles / 1000000) * freq * 2*PI; 
    // Serial.write(int(sample_rate * phase_offset_cycles*500)&0x1F);
    // Serial.write(int(sample_rate * phase_offset_cycles*500)>>8);
    Serial.write(int(sample_rate * phase_offset_cycles)>>8);  // changed 28/02 MSB FIRST
    Serial.write(int(sample_rate * phase_offset_cycles)&0xFF); // changed 28/02


    return (time2 - time1);
  }
}



/* Find the optimal number of samples to read the desired number of periods of the input signal */
void calibrate_samples() {

    /* Take 10000 samples to determine sample rate */
    num_samples = 10000;
    uint32_t sample_time = read_signal(NULL, NULL, NULL, NULL, 0);
    
    /* Calculate sample rate and total number of samples */
    sample_rate = (float)sample_time / 10000.0;
    samples_per_period = (1000000 / sample_rate) / TEST_FREQ;
    num_samples = samples_per_period * NUM_PERIODS;
}

void calibrate_samples_at_freq(int freq) {

    /* Take 10000 samples to determine sample rate */
    num_samples = 10000;
    uint32_t sample_time = read_signal_at_freq(freq, 0);
    
    /* Calculate sample rate and total number of samples */
    sample_rate = (float)sample_time / 10000.0;
    samples_per_period = (1000000 / sample_rate) / freq;
    num_samples = samples_per_period * NUM_PERIODS;
}

/* Find the magnitude and phase offset of the highest voltage differental point */
void calibrate_signal(meas_t drive_type, meas_t meas_type) {

    // Set current source electrodes to origin
    mux_write(CHIP_SEL_MUX_SRC, elec_to_mux[0], MUX_EN);
    if (drive_type == AD)
        mux_write(CHIP_SEL_MUX_SINK, elec_to_mux[1], MUX_EN);
    else if (drive_type == OP)
        mux_write(CHIP_SEL_MUX_SINK, elec_to_mux[16], MUX_EN);

    // Set voltage measurement electrodes to the highest voltage differential point
    if (meas_type == AD) {
        mux_write(CHIP_SEL_MUX_VP, elec_to_mux[30], MUX_EN);
        mux_write(CHIP_SEL_MUX_VN, elec_to_mux[31], MUX_EN);
    } else if (meas_type == OP) {
        mux_write(CHIP_SEL_MUX_VP, elec_to_mux[15], MUX_EN);
        mux_write(CHIP_SEL_MUX_VN, elec_to_mux[31], MUX_EN);
    }

    delay(5);

    /* Determine the magnitude and phase offset of the reference signal */
    ref_signal_mag = 1.0;
    phase_offset = 0;
    uint32_t sample_time = read_signal(NULL, &ref_signal_mag, &phase_offset, NULL, 0);

    mux_write(CHIP_SEL_MUX_SRC, 0, MUX_DIS);
    mux_write(CHIP_SEL_MUX_SINK, 0, MUX_DIS);
    mux_write(CHIP_SEL_MUX_VP, 0, MUX_DIS);
    mux_write(CHIP_SEL_MUX_VN, 0, MUX_DIS);
}

uint16_t sine_compare(uint16_t * signal, uint16_t pk_pk, uint16_t points_per_period, uint8_t num_periods) {

    if (points_per_period == 0)
        return 0;

    uint16_t num_points = points_per_period * num_periods;
    
    uint16_t i;
    uint16_t point_error;
    uint32_t error_sum = 0;

    for (i = 0; i < num_points; i++) {
        // Scale sine wave to match input signal frequency and amplitude
        uint32_t ref_index = ((i * 1024) / points_per_period) % 1024;
        int32_t ref_point = (sine_table[ref_index] * pk_pk) / 1024;

        // Center input signal to 0
        int32_t signal_val = (int16_t)signal[i] - 512;

        point_error = abs(signal_val - ref_point);
        error_sum += point_error;

//        Serial.print(signal_val);
//        Serial.print("\t");
//        Serial.print(ref_point);
//        Serial.print("\t");
//        Serial.println(point_error);
    }
    error_sum = error_sum / num_points;
    return error_sum;
}


void read_all_at_freq(int freq, uint8_t num_elec) // added by david 11/12/23
{
    uint8_t src_pin, sink_pin, vp_pin, vn_pin;
    uint16_t num_meas = 0;

    // SELECTED COMBINATIONS 
    for (int combo = 0; combo < num_combos/4; combo++)
    {
      vn_pin = (selected_combos[(combo*4)]-1); // minus one accounts for different indexing in matlab
      vp_pin = (selected_combos[combo*4+1]-1);
      sink_pin = (selected_combos[combo*4+2]-1);
      src_pin = (selected_combos[combo*4+3]-1);

      mux_write(CHIP_SEL_MUX_SRC, elec_to_mux[src_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_SINK, elec_to_mux[sink_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VP, elec_to_mux[vp_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VN, elec_to_mux[vn_pin], MUX_EN);

      delayMicroseconds(150);  //# SPEED RUN
      read_signal_at_freq(freq, 1);
      num_meas++;
    }

    // OP_OP 
    for (int combo = 0; combo < num_op_op/4; combo++)
    {
      vn_pin = (op_op_combos[(combo*4)]-1); // minus one accounts for different indexing in matlab
      vp_pin = (op_op_combos[combo*4+1]-1);
      sink_pin = (op_op_combos[combo*4+2]-1);
      src_pin = (op_op_combos[combo*4+3]-1);

      mux_write(CHIP_SEL_MUX_SRC, elec_to_mux[src_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_SINK, elec_to_mux[sink_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VP, elec_to_mux[vp_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VN, elec_to_mux[vn_pin], MUX_EN);

      delayMicroseconds(150);  //# SPEED RUN
      read_signal_at_freq(freq, 1);
      num_meas++;
    }

    // OP AD
    for (int combo = 0; combo < num_op_ad/4; combo++)
    {
      vn_pin = (op_ad_combos[(combo*4)]-1); // minus one accounts for different indexing in matlab
      vp_pin = (op_ad_combos[combo*4+1]-1);
      sink_pin = (op_ad_combos[combo*4+2]-1);
      src_pin = (op_ad_combos[combo*4+3]-1);

      mux_write(CHIP_SEL_MUX_SRC, elec_to_mux[src_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_SINK, elec_to_mux[sink_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VP, elec_to_mux[vp_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VN, elec_to_mux[vn_pin], MUX_EN);

      delayMicroseconds(150);  //# SPEED RUN
      read_signal_at_freq(freq, 1);
      num_meas++;
    }

    // AD AD
    for (int combo = 0; combo < num_ad_ad/4; combo++)
    {
      vn_pin = (ad_ad_combos[(combo*4)]-1); // minus one accounts for different indexing in matlab
      vp_pin = (ad_ad_combos[combo*4+1]-1);
      sink_pin = (ad_ad_combos[combo*4+2]-1);
      src_pin = (ad_ad_combos[combo*4+3]-1);

      mux_write(CHIP_SEL_MUX_SRC, elec_to_mux[src_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_SINK, elec_to_mux[sink_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VP, elec_to_mux[vp_pin], MUX_EN);
      mux_write(CHIP_SEL_MUX_VN, elec_to_mux[vn_pin], MUX_EN);

      delayMicroseconds(150);  //# SPEED RUN
      read_signal_at_freq(freq, 1);
      num_meas++;
    }

}

void setup() 
{
    Serial.begin(230400);

    // Serial.write(0xFF);
    // Serial.write(0xFF);
    // Serial.write(0xFF);
    // Serial.write(0xFF);
    // Serial.write(0xFF);
    // Serial.write(0xFF);
    // Serial.write(0xFF);
    // Serial.write(0xFF);

    // while(!Serial);

    pinMode(HSPI_MOSI_PIN, OUTPUT);
    pinMode(HSPI_SCK_PIN, OUTPUT);
    pinMode(VSPI_MOSI_PIN, OUTPUT);
    pinMode(VSPI_SCK_PIN, OUTPUT);
    
    pinMode(CHIP_SEL_DRIVE, OUTPUT);
    pinMode(CHIP_SEL_MEAS, OUTPUT);
    pinMode(CHIP_SEL_MUX_SRC, OUTPUT);
    pinMode(CHIP_SEL_MUX_SINK, OUTPUT);
    pinMode(CHIP_SEL_MUX_VP, OUTPUT);
    pinMode(CHIP_SEL_MUX_VN, OUTPUT);
    pinMode(CHIP_SEL_AD5930, OUTPUT);
    
    pinMode(AD5930_INT_PIN, OUTPUT);
    pinMode(AD5930_CTRL_PIN, OUTPUT);
    pinMode(AD5930_STANDBY_PIN, OUTPUT);
    pinMode(AD5930_MSBOUT_PIN, INPUT);

    // ADC input
    pinMode(14, INPUT);
    pinMode(15, INPUT);
    pinMode(16, INPUT);
    pinMode(17, INPUT);
    pinMode(18, INPUT);
    pinMode(19, INPUT);
    pinMode(20, INPUT);
    pinMode(21, INPUT);
    pinMode(22, INPUT);
    pinMode(23, INPUT);

    digitalWrite(CHIP_SEL_DRIVE, HIGH);
    digitalWrite(CHIP_SEL_MEAS, HIGH);
    digitalWrite(CHIP_SEL_MUX_SRC, HIGH);
    digitalWrite(CHIP_SEL_MUX_SINK, HIGH);
    digitalWrite(CHIP_SEL_MUX_VP, HIGH);
    digitalWrite(CHIP_SEL_MUX_VN, HIGH);
    digitalWrite(CHIP_SEL_AD5930, HIGH);
    digitalWrite(AD5930_INT_PIN, LOW);
    digitalWrite(AD5930_CTRL_PIN, LOW);
    digitalWrite(AD5930_STANDBY_PIN, LOW);
    
    digitalWrite(ADS_PWR, LOW); //double-check
    digitalWrite(ADS_OE, LOW);

//    SPI.begin();

    /* B24 = 0 (start freq high and low regs can be written independently)
    * DAC ENABLE = 1 (DAC enabled)
    * SINE/TRI = 1 (sine output)
    * MSBOUTEN = 1 (MSBOUT enabled)
    * CW/BURST = 1 (no mid-scale output after burst)
    * INT/EXT BURST = 1 (burst controlled by CTRL pin)
    * INT/EXT INCR = 1 (frequency increment controlled by CTRL pin)
    * MODE = 1 (frequency saw sweep)
    * SYNCSEL = 0 (SYNCOUT outputs pulse at each freq increment)
    * SYNCOUTEN = 0 (SYNCOUT disabled)
    */
    AD5930_Write(CTRL_REG, 0b011111110011);
    AD5930_Set_Start_Freq(TEST_FREQ);

    AD5270_Lock(CHIP_SEL_DRIVE, 0);
    AD5270_Lock(CHIP_SEL_MEAS, 0);

/* // dsh
   /* Start the frequency sweep */
   digitalWrite(AD5930_CTRL_PIN, HIGH);
   delay(100); //# SPEED RUN

    calibrate_samples();
    AD5270_Set(CHIP_SEL_MEAS, 1); // MANUALLY SET GAINS
    AD5270_Set(CHIP_SEL_DRIVE, 1023);

    
//    calibrate_gain(AD, AD);
//    calibrate_signal(AD, AD);

//    AD5270_Set(CHIP_SEL_DRIVE, 594);
//    AD5270_Set(CHIP_SEL_MEAS, 23);
//    AD5270_Shutdown(CHIP_SEL_DRIVE, 1);
//    AD5270_Shutdown(CHIP_SEL_MEAS, 1);

    mux_write(CHIP_SEL_MUX_SRC, elec_to_mux[0], MUX_EN);
    mux_write(CHIP_SEL_MUX_SINK, elec_to_mux[1], MUX_EN);
    mux_write(CHIP_SEL_MUX_VP, elec_to_mux[0], MUX_EN);
    mux_write(CHIP_SEL_MUX_VN, elec_to_mux[1], MUX_EN);

//    Serial.print("Current gain: ");
//    Serial.println(current_gain);
//    Serial.print("Measurement gain: ");
//    Serial.println(voltage_gain);
//    Serial.print("Sample rate (uS per reading): ");
//    Serial.println(sample_rate, 4);
//    Serial.print("Samples per period: ");
//    Serial.println(samples_per_period);
//    Serial.print("Reference signal magnitude (V): ");
//    Serial.println(ref_signal_mag, 4);
//    Serial.print("Reference signal phase offset (radians): ");
//    Serial.println(phase_offset, 4);

//    uint16_t i;
//
//    /* Read resting impedance state for calibration */
//    for(i = 0; i < 30; i++)
//    {
//        read_frame(AD, AD, signal_rms, signal_mag, signal_phase, NUM_ELECTRODES);
//        
//        uint16_t j;
//        for (j = 0; j < NUM_MEAS; j++)
//        {
//            if (signal_rms[j] != 0)
//                cur_frame[j] = 0.80 * cur_frame[j] + 0.20 * (signal_rms[j]);
//        }
//    }
//
//    Serial.println("origin frame");
//    for (i = 0; i < NUM_MEAS; i++)
//    {                                                                             
//        Serial.println(cur_frame[i], 4);
//    }

AD5930_Set_Start_Freq(10000);
calibrate_samples_at_freq(10000);
delay(1000*10); // Wait 10s before beginning

t0 = millis() - 60000; 
}

void loop() 
{   
  uint16_t i;

  if (millis() - t0 > 350) {
  t0 = millis();
  read_all_at_freq(10000, NUM_ELECTRODES);
  Serial.write(0xFF);
  Serial.write(0xFF);
  Serial.write(0xFF);
  Serial.write(0xFF);
  Serial.write(0xFF);
  Serial.write(0xFF);
  Serial.write(0xFF);
  Serial.write(0xFF);
  //delay(1000*60*4); // Record data roughly every 5 minutes
  }
}
